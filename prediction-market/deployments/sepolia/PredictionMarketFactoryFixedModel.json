{
  "address": "0x9b61E083185b94DB262AA74F2A02dD527bE36186",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum PredictionMarketFixedModel.Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "MarketCreatedFixedModel",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "enum PredictionMarketFixedModel.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllFixedModelMarkets",
      "outputs": [
        {
          "internalType": "contract PredictionMarketFixedModel[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictionMarketsFixedModel",
      "outputs": [
        {
          "internalType": "contract PredictionMarketFixedModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98a2996795a763add3fb318838783d75253095cfd8e3a1ad31c0fbd50b62df56",
  "receipt": {
    "to": null,
    "from": "0xa2219C4f48bC9e6806Bce3B391aB9e23f55FEbb5",
    "contractAddress": "0x9b61E083185b94DB262AA74F2A02dD527bE36186",
    "transactionIndex": 111,
    "gasUsed": "2320418",
    "logsBloom": "0x
    "blockHash": "0x9b95b6a49f40fa1c81754f476116ab82e9bb738a9e984de5dcad82b743487a3e",
    "transactionHash": "0x98a2996795a763add3fb318838783d75253095cfd8e3a1ad31c0fbd50b62df56",
    "logs": [],
    "blockNumber": 8872605,
    "cumulativeGasUsed": "18886178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "439739b4a6653e98173887edc1f7801d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum PredictionMarketFixedModel.Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"MarketCreatedFixedModel\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"enum PredictionMarketFixedModel.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFixedModelMarkets\",\"outputs\":[{\"internalType\":\"contract PredictionMarketFixedModel[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictionMarketsFixedModel\",\"outputs\":[{\"internalType\":\"contract PredictionMarketFixedModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionMarketFactoryFixedModel.sol\":\"PredictionMarketFactoryFixedModel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/PredictionMarketFactoryFixedModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./PredictionMarketFixedModel.sol\\\";\\n\\ncontract PredictionMarketFactoryFixedModel {\\n    PredictionMarketFixedModel[] public predictionMarketsFixedModel;\\n    \\n    event MarketCreatedFixedModel(address indexed marketAddress, string question, PredictionMarketFixedModel.Category category);\\n\\n    function createMarket(\\n        string memory _question,\\n        PredictionMarketFixedModel.Category _category,\\n        address _oracle,\\n        address _usdcToken\\n    ) public returns (address) {\\n        PredictionMarketFixedModel newMarket = new PredictionMarketFixedModel(\\n            _question,\\n            _category,\\n            _oracle,\\n            _usdcToken\\n        );\\n        \\n        newMarket.transferOwnership(msg.sender);\\n\\n        predictionMarketsFixedModel.push(newMarket);\\n        emit MarketCreatedFixedModel(address(newMarket), _question, _category);\\n        return address(newMarket);\\n    }\\n\\n    function getAllFixedModelMarkets() public view returns (PredictionMarketFixedModel[] memory) {\\n        return predictionMarketsFixedModel;\\n    }\\n}\\n\",\"keccak256\":\"0xbe713229ce6d4398543bd53db77d70062cee930e998217ddb8a1c7180c579f4a\",\"license\":\"MIT\"},\"contracts/PredictionMarketFixedModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PredictionMarketFixedModel is Ownable {\\n    enum Category { ELECTION, SPORTS, CRYPTO, TV }\\n\\n    ERC20 public immutable usdcToken;\\n\\n    uint256 public totalYesBets;\\n    uint256 public totalNoBets;\\n\\n    mapping(address => uint256) public yesBets;\\n    mapping(address => uint256) public noBets;\\n\\n    Category public category;\\n    string public question;\\n    address public oracle;\\n    bool public resolved;\\n    bool public outcome; // true for YES, false for NO\\n\\n    event Bet(address indexed user, bool onYes);\\n    event Resolved(bool outcome);\\n    event Claimed(address indexed user, uint256 amount);\\n\\n    constructor(\\n        string memory _question,\\n        Category _category,\\n        address _oracle,\\n        address _usdcToken\\n    ) Ownable(msg.sender) {\\n        question = _question;\\n        category = _category;\\n        oracle = _oracle;\\n        usdcToken = ERC20(_usdcToken);\\n    }\\n\\n    function bet(bool onYes) public {\\n        require(!resolved, \\\"Market is already resolved\\\");\\n\\n        // Each bet is 1 USDC (assuming 6 decimals for USDC)\\n        uint256 betAmount = 1 * 10**6;\\n\\n        usdcToken.transferFrom(msg.sender, address(this), betAmount);\\n\\n        if (onYes) {\\n            yesBets[msg.sender]++;\\n            totalYesBets++;\\n        } else {\\n            noBets[msg.sender]++;\\n            totalNoBets++;\\n        }\\n\\n        emit Bet(msg.sender, onYes);\\n    }\\n\\n    function resolve(bool _outcome) public {\\n        require(msg.sender == oracle, \\\"Only oracle can resolve\\\");\\n        require(!resolved, \\\"Market is already resolved\\\");\\n\\n        resolved = true;\\n        outcome = _outcome;\\n        emit Resolved(_outcome);\\n    }\\n\\n    function claim() public {\\n        require(resolved, \\\"Market is not resolved yet\\\");\\n\\n        uint256 winnings;\\n        if (outcome) { // YES won\\n            uint256 userBets = yesBets[msg.sender];\\n            require(userBets > 0, \\\"No winnings to claim\\\");\\n            require(totalYesBets > 0, \\\"No yes bets were made\\\");\\n\\n            uint256 noPot = totalNoBets * 10**6; // Total USDC from NO bets\\n            uint256 profit = (noPot * userBets) / totalYesBets;\\n            winnings = profit + (userBets * 10**6); // Add original stake back\\n\\n            yesBets[msg.sender] = 0; // Prevent double claim\\n        } else { // NO won\\n            uint256 userBets = noBets[msg.sender];\\n            require(userBets > 0, \\\"No winnings to claim\\\");\\n            require(totalNoBets > 0, \\\"No no bets were made\\\");\\n\\n            uint256 yesPot = totalYesBets * 10**6; // Total USDC from YES bets\\n            uint256 profit = (yesPot * userBets) / totalNoBets;\\n            winnings = profit + (userBets * 10**6); // Add original stake back\\n\\n            noBets[msg.sender] = 0; // Prevent double claim\\n        }\\n        \\n        require(winnings > 0, \\\"Winnings must be greater than zero\\\");\\n        usdcToken.transfer(msg.sender, winnings);\\n        emit Claimed(msg.sender, winnings);\\n    }\\n}\\n\",\"keccak256\":\"0x7c67274468b275c3ec9404acd58b2f494631cadf0af5440fbce0c95bc8c5ba21\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612941806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806326195fe4146200004b578063435ffaca146200006d57806377080f8014620000a3575b600080fd5b62000055620000d9565b60405162000064919062000473565b60405180910390f35b6200008b60048036038101906200008591906200067a565b62000169565b6040516200009a91906200071c565b60405180910390f35b620000c16004803603810190620000bb919062000774565b620002dd565b604051620000d09190620007b7565b60405180910390f35b606060008054806020026020016040519081016040528092919081815260200182805480156200015f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000114575b5050505050905090565b600080858585856040516200017e906200031d565b6200018d9493929190620008dd565b604051809103906000f080158015620001aa573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401620001e891906200071c565b600060405180830381600087803b1580156200020357600080fd5b505af115801562000218573d6000803e3d6000fd5b505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f35a57d46322a84619fdb0ec3057e18b424f0c3d67271cb84e587662c4e6cab4e8787604051620002c992919062000931565b60405180910390a280915050949350505050565b60008181548110620002ee57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611fa6806200096683390190565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620003a26200039c620003968462000357565b62000377565b62000357565b9050919050565b6000620003b68262000381565b9050919050565b6000620003ca82620003a9565b9050919050565b620003dc81620003bd565b82525050565b6000620003f08383620003d1565b60208301905092915050565b6000602082019050919050565b600062000416826200032b565b62000422818562000336565b93506200042f8362000347565b8060005b83811015620004665781516200044a8882620003e2565b97506200045783620003fc565b92505060018101905062000433565b5085935050505092915050565b600060208201905081810360008301526200048f818462000409565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200050082620004b5565b810181811067ffffffffffffffff82111715620005225762000521620004c6565b5b80604052505050565b60006200053762000497565b9050620005458282620004f5565b919050565b600067ffffffffffffffff821115620005685762000567620004c6565b5b6200057382620004b5565b9050602081019050919050565b82818337600083830152505050565b6000620005a6620005a0846200054a565b6200052b565b905082815260208101848484011115620005c557620005c4620004b0565b5b620005d284828562000580565b509392505050565b600082601f830112620005f257620005f1620004ab565b5b8135620006048482602086016200058f565b91505092915050565b600481106200061b57600080fd5b50565b6000813590506200062f816200060d565b92915050565b6000620006428262000357565b9050919050565b620006548162000635565b81146200066057600080fd5b50565b600081359050620006748162000649565b92915050565b60008060008060808587031215620006975762000696620004a1565b5b600085013567ffffffffffffffff811115620006b857620006b7620004a6565b5b620006c687828801620005da565b9450506020620006d9878288016200061e565b9350506040620006ec8782880162000663565b9250506060620006ff8782880162000663565b91505092959194509250565b620007168162000635565b82525050565b60006020820190506200073360008301846200070b565b92915050565b6000819050919050565b6200074e8162000739565b81146200075a57600080fd5b50565b6000813590506200076e8162000743565b92915050565b6000602082840312156200078d576200078c620004a1565b5b60006200079d848285016200075d565b91505092915050565b620007b181620003bd565b82525050565b6000602082019050620007ce6000830184620007a6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000810578082015181840152602081019050620007f3565b60008484015250505050565b60006200082982620007d4565b620008358185620007df565b935062000847818560208601620007f0565b6200085281620004b5565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110620008a0576200089f6200085d565b5b50565b6000819050620008b3826200088c565b919050565b6000620008c582620008a3565b9050919050565b620008d781620008b8565b82525050565b60006080820190508181036000830152620008f981876200081c565b90506200090a6020830186620008cc565b6200091960408301856200070b565b6200092860608301846200070b565b95945050505050565b600060408201905081810360008301526200094d81856200081c565b90506200095e6020830184620008cc565b939250505056fe60a06040523480156200001157600080fd5b5060405162001fa638038062001fa6833981810160405281019062000037919062000461565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000503565b60405180910390fd5b620000be816200017d60201b60201c565b508360069081620000d091906200076b565b5082600560006101000a81548160ff02191690836003811115620000f957620000f862000852565b5b021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000881565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002aa826200025f565b810181811067ffffffffffffffff82111715620002cc57620002cb62000270565b5b80604052505050565b6000620002e162000241565b9050620002ef82826200029f565b919050565b600067ffffffffffffffff82111562000312576200031162000270565b5b6200031d826200025f565b9050602081019050919050565b60005b838110156200034a5780820151818401526020810190506200032d565b60008484015250505050565b60006200036d6200036784620002f4565b620002d5565b9050828152602081018484840111156200038c576200038b6200025a565b5b620003998482856200032a565b509392505050565b600082601f830112620003b957620003b862000255565b5b8151620003cb84826020860162000356565b91505092915050565b60048110620003e257600080fd5b50565b600081519050620003f681620003d4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200042982620003fc565b9050919050565b6200043b816200041c565b81146200044757600080fd5b50565b6000815190506200045b8162000430565b92915050565b600080600080608085870312156200047e576200047d6200024b565b5b600085015167ffffffffffffffff8111156200049f576200049e62000250565b5b620004ad87828801620003a1565b9450506020620004c087828801620003e5565b9350506040620004d3878288016200044a565b9250506060620004e6878288016200044a565b91505092959194509250565b620004fd816200041c565b82525050565b60006020820190506200051a6000830184620004f2565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200057357607f821691505b6020821081036200058957620005886200052b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005b4565b620005ff8683620005b4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200064c62000646620006408462000617565b62000621565b62000617565b9050919050565b6000819050919050565b62000668836200062b565b62000680620006778262000653565b848454620005c1565b825550505050565b600090565b6200069762000688565b620006a48184846200065d565b505050565b5b81811015620006cc57620006c06000826200068d565b600181019050620006aa565b5050565b601f8211156200071b57620006e5816200058f565b620006f084620005a4565b8101602085101562000700578190505b620007186200070f85620005a4565b830182620006a9565b50505b505050565b600082821c905092915050565b6000620007406000198460080262000720565b1980831691505092915050565b60006200075b83836200072d565b9150826002028217905092915050565b620007768262000520565b67ffffffffffffffff81111562000792576200079162000270565b5b6200079e82546200055a565b620007ab828285620006d0565b600060209050601f831160018114620007e35760008415620007ce578287015190505b620007da85826200074d565b8655506200084a565b601f198416620007f3866200058f565b60005b828110156200081d57848901518255600182019150602085019450602081019050620007f6565b868310156200083d578489015162000839601f8916826200072d565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6080516116fb620008ab6000396000818161042c0152818161087d01526109dd01526116fb6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063523afb0d116100975780637dc0d1d0116100665780637dc0d1d0146102655780638da5cb5b14610283578063ef430aa6146102a1578063f2fde38b146102bf57610100565b8063523afb0d146101f1578063566aa60b1461020d578063715018a61461022b5780637620ba301461023557610100565b80633f6fa655116100d35780633f6fa6551461017b5780633fad9ae0146101995780634e71d92d146101b757806350b3b0c5146101c157610100565b80630bede3f81461010557806311eac8551461012157806327793f871461013f5780632a5968991461015d575b600080fd5b61011f600480360381019061011a9190610e5e565b6102db565b005b61012961042a565b6040516101369190610f0a565b60405180910390f35b61014761044e565b6040516101549190610f34565b60405180910390f35b610165610461565b6040516101729190610f68565b60405180910390f35b610183610467565b6040516101909190610f34565b60405180910390f35b6101a161047a565b6040516101ae9190611013565b60405180910390f35b6101bf610508565b005b6101db60048036038101906101d69190611073565b61096b565b6040516101e89190610f68565b60405180910390f35b61020b60048036038101906102069190610e5e565b610983565b005b610215610bb4565b6040516102229190610f68565b60405180910390f35b610233610bba565b005b61024f600480360381019061024a9190611073565b610bce565b60405161025c9190610f68565b60405180910390f35b61026d610be6565b60405161027a91906110af565b60405180910390f35b61028b610c0c565b60405161029891906110af565b60405180910390f35b6102a9610c35565b6040516102b69190611141565b60405180910390f35b6102d960048036038101906102d49190611073565b610c48565b005b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610362906111a8565b60405180910390fd5b600760149054906101000a900460ff16156103bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b290611214565b60405180910390fd5b6001600760146101000a81548160ff02191690831515021790555080600760156101000a81548160ff0219169083151502179055507fdabf623a6bec72ad159e2d9533e7149ec45bfc657e39f49fb6a9509852dc77dc8160405161041f9190610f34565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760159054906101000a900460ff1681565b60015481565b600760149054906101000a900460ff1681565b6006805461048790611263565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390611263565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b505050505081565b600760149054906101000a900460ff16610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906112e0565b60405180910390fd5b6000600760159054906101000a900460ff16156106d5576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec9061134c565b60405180910390fd5b60006001541161063a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610631906113b8565b60405180910390fd5b6000620f424060025461064d9190611407565b9050600060015483836106609190611407565b61066a9190611478565b9050620f42408361067b9190611407565b8161068691906114a9565b93506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050610838565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161075c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107539061134c565b60405180910390fd5b6000600254116107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890611529565b60405180910390fd5b6000620f42406001546107b49190611407565b9050600060025483836107c79190611407565b6107d19190611478565b9050620f4240836107e29190611407565b816107ed91906114a9565b93506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505b6000811161087b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610872906115bb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108d69291906115db565b6020604051808303816000875af11580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190611619565b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516109609190610f68565b60405180910390a250565b60036020528060005260406000206000915090505481565b600760149054906101000a900460ff16156109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90611214565b60405180910390fd5b6000620f424090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a3893929190611646565b6020604051808303816000875af1158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190611619565b508115610af457600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ad29061167d565b919050555060016000815480929190610aea9061167d565b9190505550610b62565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b449061167d565b919050555060026000815480929190610b5c9061167d565b91905055505b3373ffffffffffffffffffffffffffffffffffffffff167f984fde4f828718a36dabb7c6dc8c32fe1e5918af35e9bd2b1395505e328354e883604051610ba89190610f34565b60405180910390a25050565b60025481565b610bc2610cce565b610bcc6000610d55565b565b60046020528060005260406000206000915090505481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900460ff1681565b610c50610cce565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc25760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cb991906110af565b60405180910390fd5b610ccb81610d55565b50565b610cd6610e19565b73ffffffffffffffffffffffffffffffffffffffff16610cf4610c0c565b73ffffffffffffffffffffffffffffffffffffffff1614610d5357610d17610e19565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d4a91906110af565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b60008115159050919050565b610e3b81610e26565b8114610e4657600080fd5b50565b600081359050610e5881610e32565b92915050565b600060208284031215610e7457610e73610e21565b5b6000610e8284828501610e49565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ed0610ecb610ec684610e8b565b610eab565b610e8b565b9050919050565b6000610ee282610eb5565b9050919050565b6000610ef482610ed7565b9050919050565b610f0481610ee9565b82525050565b6000602082019050610f1f6000830184610efb565b92915050565b610f2e81610e26565b82525050565b6000602082019050610f496000830184610f25565b92915050565b6000819050919050565b610f6281610f4f565b82525050565b6000602082019050610f7d6000830184610f59565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fbd578082015181840152602081019050610fa2565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fe582610f83565b610fef8185610f8e565b9350610fff818560208601610f9f565b61100881610fc9565b840191505092915050565b6000602082019050818103600083015261102d8184610fda565b905092915050565b600061104082610e8b565b9050919050565b61105081611035565b811461105b57600080fd5b50565b60008135905061106d81611047565b92915050565b60006020828403121561108957611088610e21565b5b60006110978482850161105e565b91505092915050565b6110a981611035565b82525050565b60006020820190506110c460008301846110a0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061110a576111096110ca565b5b50565b600081905061111b826110f9565b919050565b600061112b8261110d565b9050919050565b61113b81611120565b82525050565b60006020820190506111566000830184611132565b92915050565b7f4f6e6c79206f7261636c652063616e207265736f6c7665000000000000000000600082015250565b6000611192601783610f8e565b915061119d8261115c565b602082019050919050565b600060208201905081810360008301526111c181611185565b9050919050565b7f4d61726b657420697320616c7265616479207265736f6c766564000000000000600082015250565b60006111fe601a83610f8e565b9150611209826111c8565b602082019050919050565b6000602082019050818103600083015261122d816111f1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127b57607f821691505b60208210810361128e5761128d611234565b5b50919050565b7f4d61726b6574206973206e6f74207265736f6c76656420796574000000000000600082015250565b60006112ca601a83610f8e565b91506112d582611294565b602082019050919050565b600060208201905081810360008301526112f9816112bd565b9050919050565b7f4e6f2077696e6e696e677320746f20636c61696d000000000000000000000000600082015250565b6000611336601483610f8e565b915061134182611300565b602082019050919050565b6000602082019050818103600083015261136581611329565b9050919050565b7f4e6f2079657320626574732077657265206d6164650000000000000000000000600082015250565b60006113a2601583610f8e565b91506113ad8261136c565b602082019050919050565b600060208201905081810360008301526113d181611395565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141282610f4f565b915061141d83610f4f565b925082820261142b81610f4f565b91508282048414831517611442576114416113d8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061148382610f4f565b915061148e83610f4f565b92508261149e5761149d611449565b5b828204905092915050565b60006114b482610f4f565b91506114bf83610f4f565b92508282019050808211156114d7576114d66113d8565b5b92915050565b7f4e6f206e6f20626574732077657265206d616465000000000000000000000000600082015250565b6000611513601483610f8e565b915061151e826114dd565b602082019050919050565b6000602082019050818103600083015261154281611506565b9050919050565b7f57696e6e696e6773206d7573742062652067726561746572207468616e207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b60006115a5602283610f8e565b91506115b082611549565b604082019050919050565b600060208201905081810360008301526115d481611598565b9050919050565b60006040820190506115f060008301856110a0565b6115fd6020830184610f59565b9392505050565b60008151905061161381610e32565b92915050565b60006020828403121561162f5761162e610e21565b5b600061163d84828501611604565b91505092915050565b600060608201905061165b60008301866110a0565b61166860208301856110a0565b6116756040830184610f59565b949350505050565b600061168882610f4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ba576116b96113d8565b5b60018201905091905056fea2646970667358221220bd8a9ccaf9ed057c7b7d8b9e02eeee23f7af126de7de74417e7faf2504d6feb164736f6c63430008180033a2646970667358221220b8e5866e9418211c65d0677ff8367547c610295fe662d2cc36182cf2f757c44464736f6c63430008180033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c806326195fe4146200004b578063435ffaca146200006d57806377080f8014620000a3575b600080fd5b62000055620000d9565b60405162000064919062000473565b60405180910390f35b6200008b60048036038101906200008591906200067a565b62000169565b6040516200009a91906200071c565b60405180910390f35b620000c16004803603810190620000bb919062000774565b620002dd565b604051620000d09190620007b7565b60405180910390f35b606060008054806020026020016040519081016040528092919081815260200182805480156200015f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000114575b5050505050905090565b600080858585856040516200017e906200031d565b6200018d9493929190620008dd565b604051809103906000f080158015620001aa573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401620001e891906200071c565b600060405180830381600087803b1580156200020357600080fd5b505af115801562000218573d6000803e3d6000fd5b505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f35a57d46322a84619fdb0ec3057e18b424f0c3d67271cb84e587662c4e6cab4e8787604051620002c992919062000931565b60405180910390a280915050949350505050565b60008181548110620002ee57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611fa6806200096683390190565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620003a26200039c620003968462000357565b62000377565b62000357565b9050919050565b6000620003b68262000381565b9050919050565b6000620003ca82620003a9565b9050919050565b620003dc81620003bd565b82525050565b6000620003f08383620003d1565b60208301905092915050565b6000602082019050919050565b600062000416826200032b565b62000422818562000336565b93506200042f8362000347565b8060005b83811015620004665781516200044a8882620003e2565b97506200045783620003fc565b92505060018101905062000433565b5085935050505092915050565b600060208201905081810360008301526200048f818462000409565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200050082620004b5565b810181811067ffffffffffffffff82111715620005225762000521620004c6565b5b80604052505050565b60006200053762000497565b9050620005458282620004f5565b919050565b600067ffffffffffffffff821115620005685762000567620004c6565b5b6200057382620004b5565b9050602081019050919050565b82818337600083830152505050565b6000620005a6620005a0846200054a565b6200052b565b905082815260208101848484011115620005c557620005c4620004b0565b5b620005d284828562000580565b509392505050565b600082601f830112620005f257620005f1620004ab565b5b8135620006048482602086016200058f565b91505092915050565b600481106200061b57600080fd5b50565b6000813590506200062f816200060d565b92915050565b6000620006428262000357565b9050919050565b620006548162000635565b81146200066057600080fd5b50565b600081359050620006748162000649565b92915050565b60008060008060808587031215620006975762000696620004a1565b5b600085013567ffffffffffffffff811115620006b857620006b7620004a6565b5b620006c687828801620005da565b9450506020620006d9878288016200061e565b9350506040620006ec8782880162000663565b9250506060620006ff8782880162000663565b91505092959194509250565b620007168162000635565b82525050565b60006020820190506200073360008301846200070b565b92915050565b6000819050919050565b6200074e8162000739565b81146200075a57600080fd5b50565b6000813590506200076e8162000743565b92915050565b6000602082840312156200078d576200078c620004a1565b5b60006200079d848285016200075d565b91505092915050565b620007b181620003bd565b82525050565b6000602082019050620007ce6000830184620007a6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000810578082015181840152602081019050620007f3565b60008484015250505050565b60006200082982620007d4565b620008358185620007df565b935062000847818560208601620007f0565b6200085281620004b5565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110620008a0576200089f6200085d565b5b50565b6000819050620008b3826200088c565b919050565b6000620008c582620008a3565b9050919050565b620008d781620008b8565b82525050565b60006080820190508181036000830152620008f981876200081c565b90506200090a6020830186620008cc565b6200091960408301856200070b565b6200092860608301846200070b565b95945050505050565b600060408201905081810360008301526200094d81856200081c565b90506200095e6020830184620008cc565b939250505056fe60a06040523480156200001157600080fd5b5060405162001fa638038062001fa6833981810160405281019062000037919062000461565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000503565b60405180910390fd5b620000be816200017d60201b60201c565b508360069081620000d091906200076b565b5082600560006101000a81548160ff02191690836003811115620000f957620000f862000852565b5b021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000881565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002aa826200025f565b810181811067ffffffffffffffff82111715620002cc57620002cb62000270565b5b80604052505050565b6000620002e162000241565b9050620002ef82826200029f565b919050565b600067ffffffffffffffff82111562000312576200031162000270565b5b6200031d826200025f565b9050602081019050919050565b60005b838110156200034a5780820151818401526020810190506200032d565b60008484015250505050565b60006200036d6200036784620002f4565b620002d5565b9050828152602081018484840111156200038c576200038b6200025a565b5b620003998482856200032a565b509392505050565b600082601f830112620003b957620003b862000255565b5b8151620003cb84826020860162000356565b91505092915050565b60048110620003e257600080fd5b50565b600081519050620003f681620003d4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200042982620003fc565b9050919050565b6200043b816200041c565b81146200044757600080fd5b50565b6000815190506200045b8162000430565b92915050565b600080600080608085870312156200047e576200047d6200024b565b5b600085015167ffffffffffffffff8111156200049f576200049e62000250565b5b620004ad87828801620003a1565b9450506020620004c087828801620003e5565b9350506040620004d3878288016200044a565b9250506060620004e6878288016200044a565b91505092959194509250565b620004fd816200041c565b82525050565b60006020820190506200051a6000830184620004f2565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200057357607f821691505b6020821081036200058957620005886200052b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620005b4565b620005ff8683620005b4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200064c62000646620006408462000617565b62000621565b62000617565b9050919050565b6000819050919050565b62000668836200062b565b62000680620006778262000653565b848454620005c1565b825550505050565b600090565b6200069762000688565b620006a48184846200065d565b505050565b5b81811015620006cc57620006c06000826200068d565b600181019050620006aa565b5050565b601f8211156200071b57620006e5816200058f565b620006f084620005a4565b8101602085101562000700578190505b620007186200070f85620005a4565b830182620006a9565b50505b505050565b600082821c905092915050565b6000620007406000198460080262000720565b1980831691505092915050565b60006200075b83836200072d565b9150826002028217905092915050565b620007768262000520565b67ffffffffffffffff81111562000792576200079162000270565b5b6200079e82546200055a565b620007ab828285620006d0565b600060209050601f831160018114620007e35760008415620007ce578287015190505b620007da85826200074d565b8655506200084a565b601f198416620007f3866200058f565b60005b828110156200081d57848901518255600182019150602085019450602081019050620007f6565b868310156200083d578489015162000839601f8916826200072d565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6080516116fb620008ab6000396000818161042c0152818161087d01526109dd01526116fb6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063523afb0d116100975780637dc0d1d0116100665780637dc0d1d0146102655780638da5cb5b14610283578063ef430aa6146102a1578063f2fde38b146102bf57610100565b8063523afb0d146101f1578063566aa60b1461020d578063715018a61461022b5780637620ba301461023557610100565b80633f6fa655116100d35780633f6fa6551461017b5780633fad9ae0146101995780634e71d92d146101b757806350b3b0c5146101c157610100565b80630bede3f81461010557806311eac8551461012157806327793f871461013f5780632a5968991461015d575b600080fd5b61011f600480360381019061011a9190610e5e565b6102db565b005b61012961042a565b6040516101369190610f0a565b60405180910390f35b61014761044e565b6040516101549190610f34565b60405180910390f35b610165610461565b6040516101729190610f68565b60405180910390f35b610183610467565b6040516101909190610f34565b60405180910390f35b6101a161047a565b6040516101ae9190611013565b60405180910390f35b6101bf610508565b005b6101db60048036038101906101d69190611073565b61096b565b6040516101e89190610f68565b60405180910390f35b61020b60048036038101906102069190610e5e565b610983565b005b610215610bb4565b6040516102229190610f68565b60405180910390f35b610233610bba565b005b61024f600480360381019061024a9190611073565b610bce565b60405161025c9190610f68565b60405180910390f35b61026d610be6565b60405161027a91906110af565b60405180910390f35b61028b610c0c565b60405161029891906110af565b60405180910390f35b6102a9610c35565b6040516102b69190611141565b60405180910390f35b6102d960048036038101906102d49190611073565b610c48565b005b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610362906111a8565b60405180910390fd5b600760149054906101000a900460ff16156103bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b290611214565b60405180910390fd5b6001600760146101000a81548160ff02191690831515021790555080600760156101000a81548160ff0219169083151502179055507fdabf623a6bec72ad159e2d9533e7149ec45bfc657e39f49fb6a9509852dc77dc8160405161041f9190610f34565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760159054906101000a900460ff1681565b60015481565b600760149054906101000a900460ff1681565b6006805461048790611263565b80601f01602080910402602001604051908101604052809291908181526020018280546104b390611263565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b505050505081565b600760149054906101000a900460ff16610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906112e0565b60405180910390fd5b6000600760159054906101000a900460ff16156106d5576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec9061134c565b60405180910390fd5b60006001541161063a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610631906113b8565b60405180910390fd5b6000620f424060025461064d9190611407565b9050600060015483836106609190611407565b61066a9190611478565b9050620f42408361067b9190611407565b8161068691906114a9565b93506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050610838565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161075c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107539061134c565b60405180910390fd5b6000600254116107a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079890611529565b60405180910390fd5b6000620f42406001546107b49190611407565b9050600060025483836107c79190611407565b6107d19190611478565b9050620f4240836107e29190611407565b816107ed91906114a9565b93506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505b6000811161087b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610872906115bb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016108d69291906115db565b6020604051808303816000875af11580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190611619565b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516109609190610f68565b60405180910390a250565b60036020528060005260406000206000915090505481565b600760149054906101000a900460ff16156109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90611214565b60405180910390fd5b6000620f424090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610a3893929190611646565b6020604051808303816000875af1158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190611619565b508115610af457600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ad29061167d565b919050555060016000815480929190610aea9061167d565b9190505550610b62565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b449061167d565b919050555060026000815480929190610b5c9061167d565b91905055505b3373ffffffffffffffffffffffffffffffffffffffff167f984fde4f828718a36dabb7c6dc8c32fe1e5918af35e9bd2b1395505e328354e883604051610ba89190610f34565b60405180910390a25050565b60025481565b610bc2610cce565b610bcc6000610d55565b565b60046020528060005260406000206000915090505481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900460ff1681565b610c50610cce565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc25760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cb991906110af565b60405180910390fd5b610ccb81610d55565b50565b610cd6610e19565b73ffffffffffffffffffffffffffffffffffffffff16610cf4610c0c565b73ffffffffffffffffffffffffffffffffffffffff1614610d5357610d17610e19565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d4a91906110af565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b60008115159050919050565b610e3b81610e26565b8114610e4657600080fd5b50565b600081359050610e5881610e32565b92915050565b600060208284031215610e7457610e73610e21565b5b6000610e8284828501610e49565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ed0610ecb610ec684610e8b565b610eab565b610e8b565b9050919050565b6000610ee282610eb5565b9050919050565b6000610ef482610ed7565b9050919050565b610f0481610ee9565b82525050565b6000602082019050610f1f6000830184610efb565b92915050565b610f2e81610e26565b82525050565b6000602082019050610f496000830184610f25565b92915050565b6000819050919050565b610f6281610f4f565b82525050565b6000602082019050610f7d6000830184610f59565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fbd578082015181840152602081019050610fa2565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fe582610f83565b610fef8185610f8e565b9350610fff818560208601610f9f565b61100881610fc9565b840191505092915050565b6000602082019050818103600083015261102d8184610fda565b905092915050565b600061104082610e8b565b9050919050565b61105081611035565b811461105b57600080fd5b50565b60008135905061106d81611047565b92915050565b60006020828403121561108957611088610e21565b5b60006110978482850161105e565b91505092915050565b6110a981611035565b82525050565b60006020820190506110c460008301846110a0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061110a576111096110ca565b5b50565b600081905061111b826110f9565b919050565b600061112b8261110d565b9050919050565b61113b81611120565b82525050565b60006020820190506111566000830184611132565b92915050565b7f4f6e6c79206f7261636c652063616e207265736f6c7665000000000000000000600082015250565b6000611192601783610f8e565b915061119d8261115c565b602082019050919050565b600060208201905081810360008301526111c181611185565b9050919050565b7f4d61726b657420697320616c7265616479207265736f6c766564000000000000600082015250565b60006111fe601a83610f8e565b9150611209826111c8565b602082019050919050565b6000602082019050818103600083015261122d816111f1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061127b57607f821691505b60208210810361128e5761128d611234565b5b50919050565b7f4d61726b6574206973206e6f74207265736f6c76656420796574000000000000600082015250565b60006112ca601a83610f8e565b91506112d582611294565b602082019050919050565b600060208201905081810360008301526112f9816112bd565b9050919050565b7f4e6f2077696e6e696e677320746f20636c61696d000000000000000000000000600082015250565b6000611336601483610f8e565b915061134182611300565b602082019050919050565b6000602082019050818103600083015261136581611329565b9050919050565b7f4e6f2079657320626574732077657265206d6164650000000000000000000000600082015250565b60006113a2601583610f8e565b91506113ad8261136c565b602082019050919050565b600060208201905081810360008301526113d181611395565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141282610f4f565b915061141d83610f4f565b925082820261142b81610f4f565b91508282048414831517611442576114416113d8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061148382610f4f565b915061148e83610f4f565b92508261149e5761149d611449565b5b828204905092915050565b60006114b482610f4f565b91506114bf83610f4f565b92508282019050808211156114d7576114d66113d8565b5b92915050565b7f4e6f206e6f20626574732077657265206d616465000000000000000000000000600082015250565b6000611513601483610f8e565b915061151e826114dd565b602082019050919050565b6000602082019050818103600083015261154281611506565b9050919050565b7f57696e6e696e6773206d7573742062652067726561746572207468616e207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b60006115a5602283610f8e565b91506115b082611549565b604082019050919050565b600060208201905081810360008301526115d481611598565b9050919050565b60006040820190506115f060008301856110a0565b6115fd6020830184610f59565b9392505050565b60008151905061161381610e32565b92915050565b60006020828403121561162f5761162e610e21565b5b600061163d84828501611604565b91505092915050565b600060608201905061165b60008301866110a0565b61166860208301856110a0565b6116756040830184610f59565b949350505050565b600061168882610f4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ba576116b96113d8565b5b60018201905091905056fea2646970667358221220bd8a9ccaf9ed057c7b7d8b9e02eeee23f7af126de7de74417e7faf2504d6feb164736f6c63430008180033a2646970667358221220b8e5866e9418211c65d0677ff8367547c610295fe662d2cc36182cf2f757c44464736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1692,
        "contract": "contracts/PredictionMarketFactoryFixedModel.sol:PredictionMarketFactoryFixedModel",
        "label": "predictionMarketsFixedModel",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(PredictionMarketFixedModel)2287)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(PredictionMarketFixedModel)2287)dyn_storage": {
        "base": "t_contract(PredictionMarketFixedModel)2287",
        "encoding": "dynamic_array",
        "label": "contract PredictionMarketFixedModel[]",
        "numberOfBytes": "32"
      },
      "t_contract(PredictionMarketFixedModel)2287": {
        "encoding": "inplace",
        "label": "contract PredictionMarketFixedModel",
        "numberOfBytes": "20"
      }
    }
  }
}