{
  "address": "0xEC7cb8C3EBE77BA6d284F13296bb1372A8522c5F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum PredictionMarketNWayFixedModel.Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "MarketCreatedNWayFixedModel",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "enum PredictionMarketNWayFixedModel.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numOutcomes",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNWayFixedModelMarkets",
      "outputs": [
        {
          "internalType": "contract PredictionMarketNWayFixedModel[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictionMarketsNWayFixedModel",
      "outputs": [
        {
          "internalType": "contract PredictionMarketNWayFixedModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc7bf0b28d7fb302b66b36b72138be3a6453460dd8b766fcd5dfd7e1d5e8c7510",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xEC7cb8C3EBE77BA6d284F13296bb1372A8522c5F",
    "transactionIndex": 0,
    "gasUsed": "2483965",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd005d4fea3bc86808fc0aa2f19b0290d06d26faa2e7629e83467fa4ef8bfa0ce",
    "transactionHash": "0xc7bf0b28d7fb302b66b36b72138be3a6453460dd8b766fcd5dfd7e1d5e8c7510",
    "logs": [],
    "blockNumber": 19489682,
    "cumulativeGasUsed": "2483965",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "804b63f2bc9367c31a5e91fb19c5e093",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum PredictionMarketNWayFixedModel.Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"MarketCreatedNWayFixedModel\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"enum PredictionMarketNWayFixedModel.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numOutcomes\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNWayFixedModelMarkets\",\"outputs\":[{\"internalType\":\"contract PredictionMarketNWayFixedModel[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictionMarketsNWayFixedModel\",\"outputs\":[{\"internalType\":\"contract PredictionMarketNWayFixedModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionMarketFactoryNWayFixedModel.sol\":\"PredictionMarketFactoryNWayFixedModel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/PredictionMarketFactoryNWayFixedModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./PredictionMarketNWayFixedModel.sol\\\";\\n\\ncontract PredictionMarketFactoryNWayFixedModel {\\n    PredictionMarketNWayFixedModel[] public predictionMarketsNWayFixedModel;\\n    \\n    event MarketCreatedNWayFixedModel(address indexed marketAddress, string question, PredictionMarketNWayFixedModel.Category category);\\n\\n    function createMarket(\\n        string memory _question,\\n        PredictionMarketNWayFixedModel.Category _category,\\n        address _oracle,\\n        address _usdcToken,\\n        uint256 _numOutcomes\\n    ) public returns (address) {\\n        PredictionMarketNWayFixedModel newMarket = new PredictionMarketNWayFixedModel(\\n            _question,\\n            _category,\\n            _oracle,\\n            _usdcToken,\\n            _numOutcomes\\n        );\\n        \\n        newMarket.transferOwnership(msg.sender);\\n\\n        predictionMarketsNWayFixedModel.push(newMarket);\\n        emit MarketCreatedNWayFixedModel(address(newMarket), _question, _category);\\n        return address(newMarket);\\n    }\\n\\n    function getAllNWayFixedModelMarkets() public view returns (PredictionMarketNWayFixedModel[] memory) {\\n        return predictionMarketsNWayFixedModel;\\n    }\\n}\\n\",\"keccak256\":\"0xea642bc16afda2b2245f45be54d33ba2aaebe9bdc1e903082e146d7b6c68098d\",\"license\":\"MIT\"},\"contracts/PredictionMarketNWayFixedModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PredictionMarketNWayFixedModel is Ownable {\\n    enum Category { ELECTION, SPORTS, CRYPTO, TV }\\n\\n    ERC20 public immutable usdcToken;\\n\\n    uint256[] public totalBetsPerOutcome;\\n    mapping(uint256 => mapping(address => uint256)) public betsPerOutcome; // outcomeIndex => user => numberOfBets\\n\\n    Category public category;\\n    string public question;\\n    address public oracle;\\n    bool public resolved;\\n    uint256 public winningOutcome;\\n\\n    event Bet(address indexed user, uint256 indexed outcomeIndex);\\n    event Resolved(uint256 winningOutcome);\\n    event Claimed(address indexed user, uint256 amount);\\n\\n    constructor(\\n        string memory _question,\\n        Category _category,\\n        address _oracle,\\n        address _usdcToken,\\n        uint256 _numOutcomes\\n    ) Ownable(msg.sender) {\\n        question = _question;\\n        category = _category;\\n        oracle = _oracle;\\n        usdcToken = ERC20(_usdcToken);\\n        totalBetsPerOutcome = new uint256[](_numOutcomes);\\n    }\\n\\n    function bet(uint256 outcomeIndex) public {\\n        require(!resolved, \\\"Market is already resolved\\\");\\n        require(outcomeIndex < totalBetsPerOutcome.length, \\\"Invalid outcome index\\\");\\n\\n        // Each bet is 1 USDC (assuming 6 decimals for USDC)\\n        uint256 betAmount = 1 * 10**6;\\n\\n        require(usdcToken.balanceOf(msg.sender) >= betAmount, \\\"Insufficient USDC balance\\\");\\n        usdcToken.transferFrom(msg.sender, address(this), betAmount);\\n\\n        betsPerOutcome[outcomeIndex][msg.sender]++;\\n        totalBetsPerOutcome[outcomeIndex]++;\\n\\n        emit Bet(msg.sender, outcomeIndex);\\n    }\\n\\n    function getNumOutcomes() public view returns (uint256) {\\n        return totalBetsPerOutcome.length;\\n    }\\n\\n    function resolve(uint256 _winningOutcome) public {\\n        require(msg.sender == oracle, \\\"Only oracle can resolve\\\");\\n        require(!resolved, \\\"Market is already resolved\\\");\\n        require(_winningOutcome < totalBetsPerOutcome.length, \\\"Invalid outcome\\\");\\n\\n        resolved = true;\\n        winningOutcome = _winningOutcome;\\n        emit Resolved(_winningOutcome);\\n    }\\n\\n    function claim() public {\\n        require(resolved, \\\"Market is not resolved yet\\\");\\n\\n        uint256 userBets = betsPerOutcome[winningOutcome][msg.sender];\\n        require(userBets > 0, \\\"No winnings to claim\\\");\\n\\n        uint256 totalWinningBets = totalBetsPerOutcome[winningOutcome];\\n        require(totalWinningBets > 0, \\\"No winning bets were made\\\");\\n\\n        uint256 totalLosingPot = 0;\\n        for (uint i = 0; i < totalBetsPerOutcome.length; i++) {\\n            if (i != winningOutcome) {\\n                totalLosingPot += totalBetsPerOutcome[i] * 10**6;\\n            }\\n        }\\n\\n        uint256 profit = (totalLosingPot * userBets) / totalWinningBets;\\n        uint256 winnings = profit + (userBets * 10**6); // Add original stake back\\n\\n        betsPerOutcome[winningOutcome][msg.sender] = 0; // Prevent double claim\\n        \\n        require(winnings > 0, \\\"Winnings must be greater than zero\\\");\\n        usdcToken.transfer(msg.sender, winnings);\\n        emit Claimed(msg.sender, winnings);\\n    }\\n}\\n\",\"keccak256\":\"0x0f45f19ed616d19612c9c0a3881dabf937584b076d3737684679a6b3c3e4d927\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c3e806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063a5f847ba146200004b578063b3c4d6c81462000081578063d67f721914620000a3575b600080fd5b6200006960048036038101906200006391906200037d565b620000d9565b6040516200007891906200043a565b60405180910390f35b6200008b62000119565b6040516200009a919062000525565b60405180910390f35b620000c16004803603810190620000bb919062000718565b620001a9565b604051620000d09190620007d0565b60405180910390f35b60008181548110620000ea57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200019f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000154575b5050505050905090565b6000808686868686604051620001bf9062000320565b620001cf95949392919062000907565b604051809103906000f080158015620001ec573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016200022a9190620007d0565b600060405180830381600087803b1580156200024557600080fd5b505af11580156200025a573d6000803e3d6000fd5b505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f8823d8d711733662c45ad94b12895afba39d891ed81078700a8c04a642fd818788886040516200030b9291906200096b565b60405180910390a28091505095945050505050565b61226980620009a083390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620003578162000342565b81146200036357600080fd5b50565b60008135905062000377816200034c565b92915050565b60006020828403121562000396576200039562000338565b5b6000620003a68482850162000366565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620003fa620003f4620003ee84620003af565b620003cf565b620003af565b9050919050565b60006200040e82620003d9565b9050919050565b6000620004228262000401565b9050919050565b620004348162000415565b82525050565b600060208201905062000451600083018462000429565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200048e8162000415565b82525050565b6000620004a2838362000483565b60208301905092915050565b6000602082019050919050565b6000620004c88262000457565b620004d4818562000462565b9350620004e18362000473565b8060005b8381101562000518578151620004fc888262000494565b97506200050983620004ae565b925050600181019050620004e5565b5085935050505092915050565b60006020820190508181036000830152620005418184620004bb565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200059e8262000553565b810181811067ffffffffffffffff82111715620005c057620005bf62000564565b5b80604052505050565b6000620005d56200032e565b9050620005e3828262000593565b919050565b600067ffffffffffffffff82111562000606576200060562000564565b5b620006118262000553565b9050602081019050919050565b82818337600083830152505050565b6000620006446200063e84620005e8565b620005c9565b9050828152602081018484840111156200066357620006626200054e565b5b620006708482856200061e565b509392505050565b600082601f83011262000690576200068f62000549565b5b8135620006a28482602086016200062d565b91505092915050565b60048110620006b957600080fd5b50565b600081359050620006cd81620006ab565b92915050565b6000620006e082620003af565b9050919050565b620006f281620006d3565b8114620006fe57600080fd5b50565b6000813590506200071281620006e7565b92915050565b600080600080600060a0868803121562000737576200073662000338565b5b600086013567ffffffffffffffff8111156200075857620007576200033d565b5b620007668882890162000678565b95505060206200077988828901620006bc565b94505060406200078c8882890162000701565b93505060606200079f8882890162000701565b9250506080620007b28882890162000366565b9150509295509295909350565b620007ca81620006d3565b82525050565b6000602082019050620007e76000830184620007bf565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620008295780820151818401526020810190506200080c565b60008484015250505050565b60006200084282620007ed565b6200084e8185620007f8565b93506200086081856020860162000809565b6200086b8162000553565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110620008b957620008b862000876565b5b50565b6000819050620008cc82620008a5565b919050565b6000620008de82620008bc565b9050919050565b620008f081620008d1565b82525050565b620009018162000342565b82525050565b600060a082019050818103600083015262000923818862000835565b9050620009346020830187620008e5565b620009436040830186620007bf565b620009526060830185620007bf565b620009616080830184620008f6565b9695505050505050565b6000604082019050818103600083015262000987818562000835565b9050620009986020830184620008e5565b939250505056fe60a06040523480156200001157600080fd5b506040516200226938038062002269833981810160405281019062000037919062000573565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a491906200062b565b60405180910390fd5b620000be81620001e360201b60201c565b508460049081620000d0919062000889565b5083600360006101000a81548160ff02191690836003811115620000f957620000f862000970565b5b021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508067ffffffffffffffff81111562000190576200018f62000347565b5b604051908082528060200260200182016040528015620001bf5781602001602082028036833780820191505090505b5060019080519060200190620001d7929190620002a7565b5050505050506200099f565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054828255906000526020600020908101928215620002e6579160200282015b82811115620002e5578251825591602001919060010190620002c8565b5b509050620002f59190620002f9565b5090565b5b8082111562000314576000816000905550600101620002fa565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003818262000336565b810181811067ffffffffffffffff82111715620003a357620003a262000347565b5b80604052505050565b6000620003b862000318565b9050620003c6828262000376565b919050565b600067ffffffffffffffff821115620003e957620003e862000347565b5b620003f48262000336565b9050602081019050919050565b60005b838110156200042157808201518184015260208101905062000404565b60008484015250505050565b6000620004446200043e84620003cb565b620003ac565b90508281526020810184848401111562000463576200046262000331565b5b6200047084828562000401565b509392505050565b600082601f83011262000490576200048f6200032c565b5b8151620004a28482602086016200042d565b91505092915050565b60048110620004b957600080fd5b50565b600081519050620004cd81620004ab565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200050082620004d3565b9050919050565b6200051281620004f3565b81146200051e57600080fd5b50565b600081519050620005328162000507565b92915050565b6000819050919050565b6200054d8162000538565b81146200055957600080fd5b50565b6000815190506200056d8162000542565b92915050565b600080600080600060a0868803121562000592576200059162000322565b5b600086015167ffffffffffffffff811115620005b357620005b262000327565b5b620005c18882890162000478565b9550506020620005d488828901620004bc565b9450506040620005e78882890162000521565b9350506060620005fa8882890162000521565b92505060806200060d888289016200055c565b9150509295509295909350565b6200062581620004f3565b82525050565b60006020820190506200064260008301846200061a565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200069b57607f821691505b602082108103620006b157620006b062000653565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200071b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006dc565b620007278683620006dc565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200076a620007646200075e8462000538565b6200073f565b62000538565b9050919050565b6000819050919050565b620007868362000749565b6200079e620007958262000771565b848454620006e9565b825550505050565b600090565b620007b5620007a6565b620007c28184846200077b565b505050565b5b81811015620007ea57620007de600082620007ab565b600181019050620007c8565b5050565b601f82111562000839576200080381620006b7565b6200080e84620006cc565b810160208510156200081e578190505b620008366200082d85620006cc565b830182620007c7565b50505b505050565b600082821c905092915050565b60006200085e600019846008026200083e565b1980831691505092915050565b60006200087983836200084b565b9150826002028217905092915050565b620008948262000648565b67ffffffffffffffff811115620008b057620008af62000347565b5b620008bc825462000682565b620008c9828285620007ee565b600060209050601f831160018114620009015760008415620008ec578287015190505b620008f885826200086b565b86555062000968565b601f1984166200091186620006b7565b60005b828110156200093b5784890151825560018201915060208501945060208101905062000914565b868310156200095b578489015162000957601f8916826200084b565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b608051611899620009d0600039600081816102fd0152818161064a015281816109750152610a5001526118996000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639b34ae03116100665780639b34ae031461023c578063b0e59d1d1461025a578063ef430aa614610278578063f2fde38b14610296576100f5565b8063715018a6146101da5780637365870b146101e45780637dc0d1d0146102005780638da5cb5b1461021e576100f5565b80633f6fa655116100d35780633f6fa655146101785780633fad9ae0146101965780634e71d92d146101b45780634f896d4f146101be576100f5565b806305801f0b146100fa5780630cb450a31461012a57806311eac8551461015a575b600080fd5b610114600480360381019061010f9190610e5a565b6102b2565b6040516101219190610e96565b60405180910390f35b610144600480360381019061013f9190610f0f565b6102d6565b6040516101519190610e96565b60405180910390f35b6101626102fb565b60405161016f9190610fae565b60405180910390f35b61018061031f565b60405161018d9190610fe4565b60405180910390f35b61019e610332565b6040516101ab919061108f565b60405180910390f35b6101bc6103c0565b005b6101d860048036038101906101d39190610e5a565b61073c565b005b6101e26108bf565b005b6101fe60048036038101906101f99190610e5a565b6108d3565b005b610208610bd1565b60405161021591906110c0565b60405180910390f35b610226610bf7565b60405161023391906110c0565b60405180910390f35b610244610c20565b6040516102519190610e96565b60405180910390f35b610262610c26565b60405161026f9190610e96565b60405180910390f35b610280610c33565b60405161028d9190611152565b60405180910390f35b6102b060048036038101906102ab919061116d565b610c46565b005b600181815481106102c257600080fd5b906000526020600020016000915090505481565b6002602052816000526040600020602052806000526040600020600091509150505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600560149054906101000a900460ff1681565b6004805461033f906111c9565b80601f016020809104026020016040519081016040528092919081815260200182805461036b906111c9565b80156103b85780601f1061038d576101008083540402835291602001916103b8565b820191906000526020600020905b81548152906001019060200180831161039b57829003601f168201915b505050505081565b600560149054906101000a900460ff1661040f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040690611246565b60405180910390fd5b600060026000600654815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a0906112b2565b60405180910390fd5b60006001600654815481106104c1576104c06112d2565b5b9060005260206000200154905060008111610511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105089061134d565b60405180910390fd5b6000805b60018054905081101561057357600654811461056657620f424060018281548110610543576105426112d2565b5b9060005260206000200154610558919061139c565b8261056391906113de565b91505b8080600101915050610515565b506000828483610583919061139c565b61058d9190611441565b90506000620f4240856105a0919061139c565b826105ab91906113de565b9050600060026000600654815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008111610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063f906114e4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106a3929190611504565b6020604051808303816000875af11580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190611559565b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161072d9190610e96565b60405180910390a25050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c3906115d2565b60405180910390fd5b600560149054906101000a900460ff161561081c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108139061163e565b60405180910390fd5b6001805490508110610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a906116aa565b60405180910390fd5b6001600560146101000a81548160ff021916908315150217905550806006819055507f148a25ee2a7671350ab878ff183447de8ae5afa2ee0ae7d5ee1ad6b25c4868c2816040516108b49190610e96565b60405180910390a150565b6108c7610ccc565b6108d16000610d53565b565b600560149054906101000a900460ff1615610923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091a9061163e565b60405180910390fd5b600180549050811061096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096190611716565b60405180910390fd5b6000620f42409050807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109cc91906110c0565b602060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d919061174b565b1015610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a45906117c4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610aab939291906117e4565b6020604051808303816000875af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190611559565b506002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b509061181b565b919050555060018281548110610b6957610b686112d2565b5b906000526020600020016000815480929190610b849061181b565b9190505550813373ffffffffffffffffffffffffffffffffffffffff167fc0ae20ffbb1eca06a840c35912bdb9f8e6e1fad1f028c875be0ddf54d480d71e60405160405180910390a35050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b6000600180549050905090565b600360009054906101000a900460ff1681565b610c4e610ccc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cb791906110c0565b60405180910390fd5b610cc981610d53565b50565b610cd4610e17565b73ffffffffffffffffffffffffffffffffffffffff16610cf2610bf7565b73ffffffffffffffffffffffffffffffffffffffff1614610d5157610d15610e17565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d4891906110c0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610e3781610e24565b8114610e4257600080fd5b50565b600081359050610e5481610e2e565b92915050565b600060208284031215610e7057610e6f610e1f565b5b6000610e7e84828501610e45565b91505092915050565b610e9081610e24565b82525050565b6000602082019050610eab6000830184610e87565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610edc82610eb1565b9050919050565b610eec81610ed1565b8114610ef757600080fd5b50565b600081359050610f0981610ee3565b92915050565b60008060408385031215610f2657610f25610e1f565b5b6000610f3485828601610e45565b9250506020610f4585828601610efa565b9150509250929050565b6000819050919050565b6000610f74610f6f610f6a84610eb1565b610f4f565b610eb1565b9050919050565b6000610f8682610f59565b9050919050565b6000610f9882610f7b565b9050919050565b610fa881610f8d565b82525050565b6000602082019050610fc36000830184610f9f565b92915050565b60008115159050919050565b610fde81610fc9565b82525050565b6000602082019050610ff96000830184610fd5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103957808201518184015260208101905061101e565b60008484015250505050565b6000601f19601f8301169050919050565b600061106182610fff565b61106b818561100a565b935061107b81856020860161101b565b61108481611045565b840191505092915050565b600060208201905081810360008301526110a98184611056565b905092915050565b6110ba81610ed1565b82525050565b60006020820190506110d560008301846110b1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061111b5761111a6110db565b5b50565b600081905061112c8261110a565b919050565b600061113c8261111e565b9050919050565b61114c81611131565b82525050565b60006020820190506111676000830184611143565b92915050565b60006020828403121561118357611182610e1f565b5b600061119184828501610efa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111e157607f821691505b6020821081036111f4576111f361119a565b5b50919050565b7f4d61726b6574206973206e6f74207265736f6c76656420796574000000000000600082015250565b6000611230601a8361100a565b915061123b826111fa565b602082019050919050565b6000602082019050818103600083015261125f81611223565b9050919050565b7f4e6f2077696e6e696e677320746f20636c61696d000000000000000000000000600082015250565b600061129c60148361100a565b91506112a782611266565b602082019050919050565b600060208201905081810360008301526112cb8161128f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2077696e6e696e6720626574732077657265206d61646500000000000000600082015250565b600061133760198361100a565b915061134282611301565b602082019050919050565b600060208201905081810360008301526113668161132a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113a782610e24565b91506113b283610e24565b92508282026113c081610e24565b915082820484148315176113d7576113d661136d565b5b5092915050565b60006113e982610e24565b91506113f483610e24565b925082820190508082111561140c5761140b61136d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061144c82610e24565b915061145783610e24565b92508261146757611466611412565b5b828204905092915050565b7f57696e6e696e6773206d7573742062652067726561746572207468616e207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b60006114ce60228361100a565b91506114d982611472565b604082019050919050565b600060208201905081810360008301526114fd816114c1565b9050919050565b600060408201905061151960008301856110b1565b6115266020830184610e87565b9392505050565b61153681610fc9565b811461154157600080fd5b50565b6000815190506115538161152d565b92915050565b60006020828403121561156f5761156e610e1f565b5b600061157d84828501611544565b91505092915050565b7f4f6e6c79206f7261636c652063616e207265736f6c7665000000000000000000600082015250565b60006115bc60178361100a565b91506115c782611586565b602082019050919050565b600060208201905081810360008301526115eb816115af565b9050919050565b7f4d61726b657420697320616c7265616479207265736f6c766564000000000000600082015250565b6000611628601a8361100a565b9150611633826115f2565b602082019050919050565b600060208201905081810360008301526116578161161b565b9050919050565b7f496e76616c6964206f7574636f6d650000000000000000000000000000000000600082015250565b6000611694600f8361100a565b915061169f8261165e565b602082019050919050565b600060208201905081810360008301526116c381611687565b9050919050565b7f496e76616c6964206f7574636f6d6520696e6465780000000000000000000000600082015250565b600061170060158361100a565b915061170b826116ca565b602082019050919050565b6000602082019050818103600083015261172f816116f3565b9050919050565b60008151905061174581610e2e565b92915050565b60006020828403121561176157611760610e1f565b5b600061176f84828501611736565b91505092915050565b7f496e73756666696369656e7420555344432062616c616e636500000000000000600082015250565b60006117ae60198361100a565b91506117b982611778565b602082019050919050565b600060208201905081810360008301526117dd816117a1565b9050919050565b60006060820190506117f960008301866110b1565b61180660208301856110b1565b6118136040830184610e87565b949350505050565b600061182682610e24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118585761185761136d565b5b60018201905091905056fea2646970667358221220b934e722fa36256977ddae8c68c325c82bd6cfa3319e93a6cde0aa484c915c4c64736f6c63430008180033a2646970667358221220af26adebc3798ba599c7da6f2140d4a38d1e3fe3c4690f29ee66fcee7459301364736f6c63430008180033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c8063a5f847ba146200004b578063b3c4d6c81462000081578063d67f721914620000a3575b600080fd5b6200006960048036038101906200006391906200037d565b620000d9565b6040516200007891906200043a565b60405180910390f35b6200008b62000119565b6040516200009a919062000525565b60405180910390f35b620000c16004803603810190620000bb919062000718565b620001a9565b604051620000d09190620007d0565b60405180910390f35b60008181548110620000ea57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200019f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000154575b5050505050905090565b6000808686868686604051620001bf9062000320565b620001cf95949392919062000907565b604051809103906000f080158015620001ec573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016200022a9190620007d0565b600060405180830381600087803b1580156200024557600080fd5b505af11580156200025a573d6000803e3d6000fd5b505050506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f8823d8d711733662c45ad94b12895afba39d891ed81078700a8c04a642fd818788886040516200030b9291906200096b565b60405180910390a28091505095945050505050565b61226980620009a083390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620003578162000342565b81146200036357600080fd5b50565b60008135905062000377816200034c565b92915050565b60006020828403121562000396576200039562000338565b5b6000620003a68482850162000366565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620003fa620003f4620003ee84620003af565b620003cf565b620003af565b9050919050565b60006200040e82620003d9565b9050919050565b6000620004228262000401565b9050919050565b620004348162000415565b82525050565b600060208201905062000451600083018462000429565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200048e8162000415565b82525050565b6000620004a2838362000483565b60208301905092915050565b6000602082019050919050565b6000620004c88262000457565b620004d4818562000462565b9350620004e18362000473565b8060005b8381101562000518578151620004fc888262000494565b97506200050983620004ae565b925050600181019050620004e5565b5085935050505092915050565b60006020820190508181036000830152620005418184620004bb565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200059e8262000553565b810181811067ffffffffffffffff82111715620005c057620005bf62000564565b5b80604052505050565b6000620005d56200032e565b9050620005e3828262000593565b919050565b600067ffffffffffffffff82111562000606576200060562000564565b5b620006118262000553565b9050602081019050919050565b82818337600083830152505050565b6000620006446200063e84620005e8565b620005c9565b9050828152602081018484840111156200066357620006626200054e565b5b620006708482856200061e565b509392505050565b600082601f83011262000690576200068f62000549565b5b8135620006a28482602086016200062d565b91505092915050565b60048110620006b957600080fd5b50565b600081359050620006cd81620006ab565b92915050565b6000620006e082620003af565b9050919050565b620006f281620006d3565b8114620006fe57600080fd5b50565b6000813590506200071281620006e7565b92915050565b600080600080600060a0868803121562000737576200073662000338565b5b600086013567ffffffffffffffff8111156200075857620007576200033d565b5b620007668882890162000678565b95505060206200077988828901620006bc565b94505060406200078c8882890162000701565b93505060606200079f8882890162000701565b9250506080620007b28882890162000366565b9150509295509295909350565b620007ca81620006d3565b82525050565b6000602082019050620007e76000830184620007bf565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620008295780820151818401526020810190506200080c565b60008484015250505050565b60006200084282620007ed565b6200084e8185620007f8565b93506200086081856020860162000809565b6200086b8162000553565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110620008b957620008b862000876565b5b50565b6000819050620008cc82620008a5565b919050565b6000620008de82620008bc565b9050919050565b620008f081620008d1565b82525050565b620009018162000342565b82525050565b600060a082019050818103600083015262000923818862000835565b9050620009346020830187620008e5565b620009436040830186620007bf565b620009526060830185620007bf565b620009616080830184620008f6565b9695505050505050565b6000604082019050818103600083015262000987818562000835565b9050620009986020830184620008e5565b939250505056fe60a06040523480156200001157600080fd5b506040516200226938038062002269833981810160405281019062000037919062000573565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a491906200062b565b60405180910390fd5b620000be81620001e360201b60201c565b508460049081620000d0919062000889565b5083600360006101000a81548160ff02191690836003811115620000f957620000f862000970565b5b021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508067ffffffffffffffff81111562000190576200018f62000347565b5b604051908082528060200260200182016040528015620001bf5781602001602082028036833780820191505090505b5060019080519060200190620001d7929190620002a7565b5050505050506200099f565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054828255906000526020600020908101928215620002e6579160200282015b82811115620002e5578251825591602001919060010190620002c8565b5b509050620002f59190620002f9565b5090565b5b8082111562000314576000816000905550600101620002fa565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003818262000336565b810181811067ffffffffffffffff82111715620003a357620003a262000347565b5b80604052505050565b6000620003b862000318565b9050620003c6828262000376565b919050565b600067ffffffffffffffff821115620003e957620003e862000347565b5b620003f48262000336565b9050602081019050919050565b60005b838110156200042157808201518184015260208101905062000404565b60008484015250505050565b6000620004446200043e84620003cb565b620003ac565b90508281526020810184848401111562000463576200046262000331565b5b6200047084828562000401565b509392505050565b600082601f83011262000490576200048f6200032c565b5b8151620004a28482602086016200042d565b91505092915050565b60048110620004b957600080fd5b50565b600081519050620004cd81620004ab565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200050082620004d3565b9050919050565b6200051281620004f3565b81146200051e57600080fd5b50565b600081519050620005328162000507565b92915050565b6000819050919050565b6200054d8162000538565b81146200055957600080fd5b50565b6000815190506200056d8162000542565b92915050565b600080600080600060a0868803121562000592576200059162000322565b5b600086015167ffffffffffffffff811115620005b357620005b262000327565b5b620005c18882890162000478565b9550506020620005d488828901620004bc565b9450506040620005e78882890162000521565b9350506060620005fa8882890162000521565b92505060806200060d888289016200055c565b9150509295509295909350565b6200062581620004f3565b82525050565b60006020820190506200064260008301846200061a565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200069b57607f821691505b602082108103620006b157620006b062000653565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200071b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006dc565b620007278683620006dc565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200076a620007646200075e8462000538565b6200073f565b62000538565b9050919050565b6000819050919050565b620007868362000749565b6200079e620007958262000771565b848454620006e9565b825550505050565b600090565b620007b5620007a6565b620007c28184846200077b565b505050565b5b81811015620007ea57620007de600082620007ab565b600181019050620007c8565b5050565b601f82111562000839576200080381620006b7565b6200080e84620006cc565b810160208510156200081e578190505b620008366200082d85620006cc565b830182620007c7565b50505b505050565b600082821c905092915050565b60006200085e600019846008026200083e565b1980831691505092915050565b60006200087983836200084b565b9150826002028217905092915050565b620008948262000648565b67ffffffffffffffff811115620008b057620008af62000347565b5b620008bc825462000682565b620008c9828285620007ee565b600060209050601f831160018114620009015760008415620008ec578287015190505b620008f885826200086b565b86555062000968565b601f1984166200091186620006b7565b60005b828110156200093b5784890151825560018201915060208501945060208101905062000914565b868310156200095b578489015162000957601f8916826200084b565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b608051611899620009d0600039600081816102fd0152818161064a015281816109750152610a5001526118996000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a6116100975780639b34ae03116100665780639b34ae031461023c578063b0e59d1d1461025a578063ef430aa614610278578063f2fde38b14610296576100f5565b8063715018a6146101da5780637365870b146101e45780637dc0d1d0146102005780638da5cb5b1461021e576100f5565b80633f6fa655116100d35780633f6fa655146101785780633fad9ae0146101965780634e71d92d146101b45780634f896d4f146101be576100f5565b806305801f0b146100fa5780630cb450a31461012a57806311eac8551461015a575b600080fd5b610114600480360381019061010f9190610e5a565b6102b2565b6040516101219190610e96565b60405180910390f35b610144600480360381019061013f9190610f0f565b6102d6565b6040516101519190610e96565b60405180910390f35b6101626102fb565b60405161016f9190610fae565b60405180910390f35b61018061031f565b60405161018d9190610fe4565b60405180910390f35b61019e610332565b6040516101ab919061108f565b60405180910390f35b6101bc6103c0565b005b6101d860048036038101906101d39190610e5a565b61073c565b005b6101e26108bf565b005b6101fe60048036038101906101f99190610e5a565b6108d3565b005b610208610bd1565b60405161021591906110c0565b60405180910390f35b610226610bf7565b60405161023391906110c0565b60405180910390f35b610244610c20565b6040516102519190610e96565b60405180910390f35b610262610c26565b60405161026f9190610e96565b60405180910390f35b610280610c33565b60405161028d9190611152565b60405180910390f35b6102b060048036038101906102ab919061116d565b610c46565b005b600181815481106102c257600080fd5b906000526020600020016000915090505481565b6002602052816000526040600020602052806000526040600020600091509150505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600560149054906101000a900460ff1681565b6004805461033f906111c9565b80601f016020809104026020016040519081016040528092919081815260200182805461036b906111c9565b80156103b85780601f1061038d576101008083540402835291602001916103b8565b820191906000526020600020905b81548152906001019060200180831161039b57829003601f168201915b505050505081565b600560149054906101000a900460ff1661040f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040690611246565b60405180910390fd5b600060026000600654815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a0906112b2565b60405180910390fd5b60006001600654815481106104c1576104c06112d2565b5b9060005260206000200154905060008111610511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105089061134d565b60405180910390fd5b6000805b60018054905081101561057357600654811461056657620f424060018281548110610543576105426112d2565b5b9060005260206000200154610558919061139c565b8261056391906113de565b91505b8080600101915050610515565b506000828483610583919061139c565b61058d9190611441565b90506000620f4240856105a0919061139c565b826105ab91906113de565b9050600060026000600654815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008111610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063f906114e4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106a3929190611504565b6020604051808303816000875af11580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190611559565b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161072d9190610e96565b60405180910390a25050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c3906115d2565b60405180910390fd5b600560149054906101000a900460ff161561081c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108139061163e565b60405180910390fd5b6001805490508110610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a906116aa565b60405180910390fd5b6001600560146101000a81548160ff021916908315150217905550806006819055507f148a25ee2a7671350ab878ff183447de8ae5afa2ee0ae7d5ee1ad6b25c4868c2816040516108b49190610e96565b60405180910390a150565b6108c7610ccc565b6108d16000610d53565b565b600560149054906101000a900460ff1615610923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091a9061163e565b60405180910390fd5b600180549050811061096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096190611716565b60405180910390fd5b6000620f42409050807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109cc91906110c0565b602060405180830381865afa1580156109e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0d919061174b565b1015610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a45906117c4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610aab939291906117e4565b6020604051808303816000875af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190611559565b506002600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610b509061181b565b919050555060018281548110610b6957610b686112d2565b5b906000526020600020016000815480929190610b849061181b565b9190505550813373ffffffffffffffffffffffffffffffffffffffff167fc0ae20ffbb1eca06a840c35912bdb9f8e6e1fad1f028c875be0ddf54d480d71e60405160405180910390a35050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b6000600180549050905090565b600360009054906101000a900460ff1681565b610c4e610ccc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc05760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610cb791906110c0565b60405180910390fd5b610cc981610d53565b50565b610cd4610e17565b73ffffffffffffffffffffffffffffffffffffffff16610cf2610bf7565b73ffffffffffffffffffffffffffffffffffffffff1614610d5157610d15610e17565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610d4891906110c0565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610e3781610e24565b8114610e4257600080fd5b50565b600081359050610e5481610e2e565b92915050565b600060208284031215610e7057610e6f610e1f565b5b6000610e7e84828501610e45565b91505092915050565b610e9081610e24565b82525050565b6000602082019050610eab6000830184610e87565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610edc82610eb1565b9050919050565b610eec81610ed1565b8114610ef757600080fd5b50565b600081359050610f0981610ee3565b92915050565b60008060408385031215610f2657610f25610e1f565b5b6000610f3485828601610e45565b9250506020610f4585828601610efa565b9150509250929050565b6000819050919050565b6000610f74610f6f610f6a84610eb1565b610f4f565b610eb1565b9050919050565b6000610f8682610f59565b9050919050565b6000610f9882610f7b565b9050919050565b610fa881610f8d565b82525050565b6000602082019050610fc36000830184610f9f565b92915050565b60008115159050919050565b610fde81610fc9565b82525050565b6000602082019050610ff96000830184610fd5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561103957808201518184015260208101905061101e565b60008484015250505050565b6000601f19601f8301169050919050565b600061106182610fff565b61106b818561100a565b935061107b81856020860161101b565b61108481611045565b840191505092915050565b600060208201905081810360008301526110a98184611056565b905092915050565b6110ba81610ed1565b82525050565b60006020820190506110d560008301846110b1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061111b5761111a6110db565b5b50565b600081905061112c8261110a565b919050565b600061113c8261111e565b9050919050565b61114c81611131565b82525050565b60006020820190506111676000830184611143565b92915050565b60006020828403121561118357611182610e1f565b5b600061119184828501610efa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111e157607f821691505b6020821081036111f4576111f361119a565b5b50919050565b7f4d61726b6574206973206e6f74207265736f6c76656420796574000000000000600082015250565b6000611230601a8361100a565b915061123b826111fa565b602082019050919050565b6000602082019050818103600083015261125f81611223565b9050919050565b7f4e6f2077696e6e696e677320746f20636c61696d000000000000000000000000600082015250565b600061129c60148361100a565b91506112a782611266565b602082019050919050565b600060208201905081810360008301526112cb8161128f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2077696e6e696e6720626574732077657265206d61646500000000000000600082015250565b600061133760198361100a565b915061134282611301565b602082019050919050565b600060208201905081810360008301526113668161132a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113a782610e24565b91506113b283610e24565b92508282026113c081610e24565b915082820484148315176113d7576113d661136d565b5b5092915050565b60006113e982610e24565b91506113f483610e24565b925082820190508082111561140c5761140b61136d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061144c82610e24565b915061145783610e24565b92508261146757611466611412565b5b828204905092915050565b7f57696e6e696e6773206d7573742062652067726561746572207468616e207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b60006114ce60228361100a565b91506114d982611472565b604082019050919050565b600060208201905081810360008301526114fd816114c1565b9050919050565b600060408201905061151960008301856110b1565b6115266020830184610e87565b9392505050565b61153681610fc9565b811461154157600080fd5b50565b6000815190506115538161152d565b92915050565b60006020828403121561156f5761156e610e1f565b5b600061157d84828501611544565b91505092915050565b7f4f6e6c79206f7261636c652063616e207265736f6c7665000000000000000000600082015250565b60006115bc60178361100a565b91506115c782611586565b602082019050919050565b600060208201905081810360008301526115eb816115af565b9050919050565b7f4d61726b657420697320616c7265616479207265736f6c766564000000000000600082015250565b6000611628601a8361100a565b9150611633826115f2565b602082019050919050565b600060208201905081810360008301526116578161161b565b9050919050565b7f496e76616c6964206f7574636f6d650000000000000000000000000000000000600082015250565b6000611694600f8361100a565b915061169f8261165e565b602082019050919050565b600060208201905081810360008301526116c381611687565b9050919050565b7f496e76616c6964206f7574636f6d6520696e6465780000000000000000000000600082015250565b600061170060158361100a565b915061170b826116ca565b602082019050919050565b6000602082019050818103600083015261172f816116f3565b9050919050565b60008151905061174581610e2e565b92915050565b60006020828403121561176157611760610e1f565b5b600061176f84828501611736565b91505092915050565b7f496e73756666696369656e7420555344432062616c616e636500000000000000600082015250565b60006117ae60198361100a565b91506117b982611778565b602082019050919050565b600060208201905081810360008301526117dd816117a1565b9050919050565b60006060820190506117f960008301866110b1565b61180660208301856110b1565b6118136040830184610e87565b949350505050565b600061182682610e24565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118585761185761136d565b5b60018201905091905056fea2646970667358221220b934e722fa36256977ddae8c68c325c82bd6cfa3319e93a6cde0aa484c915c4c64736f6c63430008180033a2646970667358221220af26adebc3798ba599c7da6f2140d4a38d1e3fe3c4690f29ee66fcee7459301364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1919,
        "contract": "contracts/PredictionMarketFactoryNWayFixedModel.sol:PredictionMarketFactoryNWayFixedModel",
        "label": "predictionMarketsNWayFixedModel",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(PredictionMarketNWayFixedModel)3070)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(PredictionMarketNWayFixedModel)3070)dyn_storage": {
        "base": "t_contract(PredictionMarketNWayFixedModel)3070",
        "encoding": "dynamic_array",
        "label": "contract PredictionMarketNWayFixedModel[]",
        "numberOfBytes": "32"
      },
      "t_contract(PredictionMarketNWayFixedModel)3070": {
        "encoding": "inplace",
        "label": "contract PredictionMarketNWayFixedModel",
        "numberOfBytes": "20"
      }
    }
  }
}