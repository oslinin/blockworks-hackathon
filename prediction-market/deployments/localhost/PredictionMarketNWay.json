{
  "address": "0x96e74d78A9EC0dB11C8c9fF2FD93bC98D8895B5A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "enum PredictionMarketNWay.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_outcomeNames",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_outcomeSymbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "initialLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outcomeIndex",
          "type": "uint256"
        }
      ],
      "name": "Bet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum PredictionMarketNWay.Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningOutcome",
          "type": "uint256"
        }
      ],
      "name": "Resolved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outcomeIndex",
          "type": "uint256"
        }
      ],
      "name": "bet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "category",
      "outputs": [
        {
          "internalType": "enum PredictionMarketNWay.Category",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProbabilities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outcomeTokens",
      "outputs": [
        {
          "internalType": "contract MintableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "question",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_winningOutcome",
          "type": "uint256"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningOutcome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x96e74d78A9EC0dB11C8c9fF2FD93bC98D8895B5A",
    "transactionIndex": 0,
    "gasUsed": "4865408",
    "logsBloom": "0x
    "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844",
    "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0xe1737A48381e06cc99e9a15DdcFCCA9B0ACA62BC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0xe1737A48381e06cc99e9a15DdcFCCA9B0ACA62BC",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000003b9aca00",
        "logIndex": 1,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0x6da3EBC752f851f35e6aD44c8dA9f23822e3D453",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0x6da3EBC752f851f35e6aD44c8dA9f23822e3D453",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000003b9aca00",
        "logIndex": 3,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0x71081ce56736b2Eb3EFbff0e9a29FcDF2Cf0963F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0x71081ce56736b2Eb3EFbff0e9a29FcDF2Cf0963F",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000003b9aca00",
        "logIndex": 5,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23043634,
        "transactionHash": "0x36d37ee6ceded29eb8852cb58a5132d19f3e97a9239bda88b11f6ab719d0d9ea",
        "address": "0x96e74d78A9EC0dB11C8c9fF2FD93bC98D8895B5A",
        "topics": [
          "0xec53f72194f2c9b11786f4942461831134f3b6d455d31bfbdb585038b38af435",
          "0x00000000000000000000000096e74d78a9ec0db11c8c9ff2fd93bc98d8895b5a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002257686f2077696c6c2077696e20746865203230323420555320456c656374696f6e3f000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0xf69a5218f988aa7b96b71caed2f15e95319fd6e35f187c4e351f94cf79c30844"
      }
    ],
    "blockNumber": 23043634,
    "cumulativeGasUsed": "4865408",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Who will win the 2024 US Election?",
    0,
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xFEE2d383Ee292283eC43bdf0fa360296BE1e1149",
    [
      "Biden",
      "Trump",
      "Other"
    ],
    [
      "BIDEN",
      "TRUMP",
      "OTHER"
    ],
    "1000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "804b63f2bc9367c31a5e91fb19c5e093",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"enum PredictionMarketNWay.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_outcomeNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_outcomeSymbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"initialLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outcomeIndex\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum PredictionMarketNWay.Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningOutcome\",\"type\":\"uint256\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outcomeIndex\",\"type\":\"uint256\"}],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"category\",\"outputs\":[{\"internalType\":\"enum PredictionMarketNWay.Category\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProbabilities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outcomeTokens\",\"outputs\":[{\"internalType\":\"contract MintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"question\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningOutcome\",\"type\":\"uint256\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningOutcome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionMarketNWay.sol\":\"PredictionMarketNWay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MintableERC20 is ERC20, Ownable {\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) Ownable(msg.sender) {}\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 6;\\n    }\\n}\\n\",\"keccak256\":\"0x9c96596272c48bcdd09ebff0bd4a8162277b34d309fddacce7b8d4b6f9329e8d\",\"license\":\"MIT\"},\"contracts/PredictionMarketNWay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./MintableERC20.sol\\\";\\n\\ncontract PredictionMarketNWay {\\n    enum Category { ELECTION, SPORTS, CRYPTO, OTHER }\\n\\n    ERC20 public usdcToken;\\n    MintableERC20[] public outcomeTokens;\\n    Category public category;\\n    string public question;\\n    address public oracle;\\n    bool public resolved;\\n    uint256 public winningOutcome;\\n\\n    event MarketCreated(address indexed marketAddress, string question, Category category);\\n    event Bet(address indexed user, uint256 amount, uint256 indexed outcomeIndex);\\n    event Resolved(uint256 winningOutcome);\\n    event Claimed(address indexed user, uint256 amount);\\n\\n    constructor(\\n        string memory _question,\\n        Category _category,\\n        address _oracle,\\n        address _usdcToken,\\n        string[] memory _outcomeNames,\\n        string[] memory _outcomeSymbols,\\n        uint256 initialLiquidity\\n    ) {\\n        question = _question;\\n        category = _category;\\n        oracle = _oracle;\\n        usdcToken = ERC20(_usdcToken);\\n\\n        for (uint256 i = 0; i < _outcomeNames.length; i++) {\\n            MintableERC20 token = new MintableERC20(_outcomeNames[i], _outcomeSymbols[i]);\\n            outcomeTokens.push(token);\\n            token.mint(address(this), initialLiquidity);\\n        }\\n\\n        emit MarketCreated(address(this), _question, _category);\\n    }\\n\\n    function getProbabilities() public view returns (uint256[] memory) {\\n        uint256 numOutcomes = outcomeTokens.length;\\n        uint256[] memory probabilities = new uint256[](numOutcomes);\\n        uint256 totalTokens = 0;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            totalTokens += outcomeTokens[i].balanceOf(address(this));\\n        }\\n\\n        if (totalTokens == 0) {\\n            return probabilities;\\n        }\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            probabilities[i] = (outcomeTokens[i].balanceOf(address(this)) * 1e18) / totalTokens;\\n        }\\n\\n        return probabilities;\\n    }\\n\\n    function bet(uint256 amount, uint256 outcomeIndex) external {\\n        require(!resolved, \\\"Market is resolved\\\");\\n        require(outcomeIndex < outcomeTokens.length, \\\"Invalid outcome index\\\");\\n\\n        usdcToken.transferFrom(msg.sender, address(this), amount);\\n\\n        uint256 numOutcomes = outcomeTokens.length;\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            outcomeTokens[i].mint(address(this), amount);\\n        }\\n\\n        outcomeTokens[outcomeIndex].transfer(msg.sender, amount);\\n\\n        emit Bet(msg.sender, amount, outcomeIndex);\\n    }\\n\\n    function resolve(uint256 _winningOutcome) external {\\n        require(msg.sender == oracle, \\\"Only oracle can resolve\\\");\\n        require(!resolved, \\\"Market already resolved\\\");\\n        require(_winningOutcome < outcomeTokens.length, \\\"Invalid outcome\\\");\\n\\n        resolved = true;\\n        winningOutcome = _winningOutcome;\\n        emit Resolved(_winningOutcome);\\n    }\\n\\n    function claim() external {\\n        require(resolved, \\\"Market not resolved\\\");\\n\\n        uint256 userBalance = outcomeTokens[winningOutcome].balanceOf(msg.sender);\\n        require(userBalance > 0, \\\"No winnings to claim\\\");\\n\\n        outcomeTokens[winningOutcome].transferFrom(msg.sender, address(this), userBalance);\\n        usdcToken.transfer(msg.sender, userBalance);\\n\\n        emit Claimed(msg.sender, userBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x472ede0317d4cdf73617985463e5500440bc5a24831675307b0a9b859cb9f66b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003c9138038062003c91833981810160405281019062000037919062000625565b866003908162000048919062000976565b5085600260006101000a81548160ff0219169083600381111562000071576200007062000a5d565b5b021790555084600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8351811015620002605760008482815181106200011c576200011b62000a8c565b5b60200260200101518483815181106200013a576200013962000a8c565b5b60200260200101516040516200015090620002c0565b6200015d92919062000b0d565b604051809103906000f0801580156200017a573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff166340c10f1930856040518363ffffffff1660e01b81526004016200021d92919062000b6a565b600060405180830381600087803b1580156200023857600080fd5b505af11580156200024d573d6000803e3d6000fd5b50505050508080600101915050620000fa565b503073ffffffffffffffffffffffffffffffffffffffff167fec53f72194f2c9b11786f4942461831134f3b6d455d31bfbdb585038b38af4358888604051620002ab92919062000be8565b60405180910390a25050505050505062000c1c565b61190c806200238583390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200033782620002ec565b810181811067ffffffffffffffff82111715620003595762000358620002fd565b5b80604052505050565b60006200036e620002ce565b90506200037c82826200032c565b919050565b600067ffffffffffffffff8211156200039f576200039e620002fd565b5b620003aa82620002ec565b9050602081019050919050565b60005b83811015620003d7578082015181840152602081019050620003ba565b60008484015250505050565b6000620003fa620003f48462000381565b62000362565b905082815260208101848484011115620004195762000418620002e7565b5b62000426848285620003b7565b509392505050565b600082601f830112620004465762000445620002e2565b5b815162000458848260208601620003e3565b91505092915050565b600481106200046f57600080fd5b50565b600081519050620004838162000461565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004b68262000489565b9050919050565b620004c881620004a9565b8114620004d457600080fd5b50565b600081519050620004e881620004bd565b92915050565b600067ffffffffffffffff8211156200050c576200050b620002fd565b5b602082029050602081019050919050565b600080fd5b6000620005396200053384620004ee565b62000362565b905080838252602082019050602084028301858111156200055f576200055e6200051d565b5b835b81811015620005ad57805167ffffffffffffffff811115620005885762000587620002e2565b5b8086016200059789826200042e565b8552602085019450505060208101905062000561565b5050509392505050565b600082601f830112620005cf57620005ce620002e2565b5b8151620005e184826020860162000522565b91505092915050565b6000819050919050565b620005ff81620005ea565b81146200060b57600080fd5b50565b6000815190506200061f81620005f4565b92915050565b600080600080600080600060e0888a031215620006475762000646620002d8565b5b600088015167ffffffffffffffff811115620006685762000667620002dd565b5b620006768a828b016200042e565b9750506020620006898a828b0162000472565b96505060406200069c8a828b01620004d7565b9550506060620006af8a828b01620004d7565b945050608088015167ffffffffffffffff811115620006d357620006d2620002dd565b5b620006e18a828b01620005b7565b93505060a088015167ffffffffffffffff811115620007055762000704620002dd565b5b620007138a828b01620005b7565b92505060c0620007268a828b016200060e565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200078857607f821691505b6020821081036200079e576200079d62000740565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620008087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007c9565b620008148683620007c9565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000857620008516200084b84620005ea565b6200082c565b620005ea565b9050919050565b6000819050919050565b620008738362000836565b6200088b62000882826200085e565b848454620007d6565b825550505050565b600090565b620008a262000893565b620008af81848462000868565b505050565b5b81811015620008d757620008cb60008262000898565b600181019050620008b5565b5050565b601f8211156200092657620008f081620007a4565b620008fb84620007b9565b810160208510156200090b578190505b620009236200091a85620007b9565b830182620008b4565b50505b505050565b600082821c905092915050565b60006200094b600019846008026200092b565b1980831691505092915050565b600062000966838362000938565b9150826002028217905092915050565b620009818262000735565b67ffffffffffffffff8111156200099d576200099c620002fd565b5b620009a982546200076f565b620009b6828285620008db565b600060209050601f831160018114620009ee5760008415620009d9578287015190505b620009e5858262000958565b86555062000a55565b601f198416620009fe86620007a4565b60005b8281101562000a285784890151825560018201915060208501945060208101905062000a01565b8683101562000a48578489015162000a44601f89168262000938565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b600062000ad98262000735565b62000ae5818562000abb565b935062000af7818560208601620003b7565b62000b0281620002ec565b840191505092915050565b6000604082019050818103600083015262000b29818562000acc565b9050818103602083015262000b3f818462000acc565b90509392505050565b62000b5381620004a9565b82525050565b62000b6481620005ea565b82525050565b600060408201905062000b81600083018562000b48565b62000b90602083018462000b59565b9392505050565b6004811062000bab5762000baa62000a5d565b5b50565b600081905062000bbe8262000b97565b919050565b600062000bd08262000bae565b9050919050565b62000be28162000bc3565b82525050565b6000604082019050818103600083015262000c04818562000acc565b905062000c15602083018462000bd7565b9392505050565b6117598062000c2c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634f896d4f116100715780634f896d4f146101305780636ffcc7191461014c5780637dc0d1d0146101685780638abe59ea146101865780639b34ae03146101b6578063ef430aa6146101d4576100a9565b8063062f7b8c146100ae57806311eac855146100cc5780633f6fa655146100ea5780633fad9ae0146101085780634e71d92d14610126575b600080fd5b6100b66101f2565b6040516100c39190610dfb565b60405180910390f35b6100d4610455565b6040516100e19190610e9c565b60405180910390f35b6100f2610479565b6040516100ff9190610ed2565b60405180910390f35b61011061048c565b60405161011d9190610f7d565b60405180910390f35b61012e61051a565b005b61014a60048036038101906101459190610fd0565b61081b565b005b61016660048036038101906101619190610ffd565b61099e565b005b610170610cb5565b60405161017d919061105e565b60405180910390f35b6101a0600480360381019061019b9190610fd0565b610cdb565b6040516101ad919061109a565b60405180910390f35b6101be610d1a565b6040516101cb91906110c4565b60405180910390f35b6101dc610d20565b6040516101e99190611156565b60405180910390f35b60606000600180549050905060008167ffffffffffffffff81111561021a57610219611171565b5b6040519080825280602002602001820160405280156102485781602001602082028036833780820191505090505b5090506000805b83811015610329576001818154811061026b5761026a6111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102ce919061105e565b602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906111e4565b8261031a9190611240565b9150808060010191505061024f565b506000810361033d57819350505050610452565b60005b8381101561044a5781670de0b6b3a764000060018381548110610366576103656111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103c9919061105e565b602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a91906111e4565b6104149190611274565b61041e91906112e5565b838281518110610431576104306111a0565b5b6020026020010181815250508080600101915050610340565b508193505050505b90565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1681565b6003805461049990611345565b80601f01602080910402602001604051908101604052809291908181526020018280546104c590611345565b80156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b505050505081565b600460149054906101000a900460ff16610569576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610560906113c2565b60405180910390fd5b6000600160055481548110610581576105806111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105e4919061105e565b602060405180830381865afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062591906111e4565b90506000811161066a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106619061142e565b60405180910390fd5b6001600554815481106106805761067f6111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106e79392919061144e565b6020604051808303816000875af1158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a91906114b1565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107869291906114de565b6020604051808303816000875af11580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906114b1565b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161081091906110c4565b60405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290611553565b60405180910390fd5b600460149054906101000a900460ff16156108fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f2906115bf565b60405180910390fd5b6001805490508110610942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109399061162b565b60405180910390fd5b6001600460146101000a81548160ff021916908315150217905550806005819055507f148a25ee2a7671350ab878ff183447de8ae5afa2ee0ae7d5ee1ad6b25c4868c28160405161099391906110c4565b60405180910390a150565b600460149054906101000a900460ff16156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e590611697565b60405180910390fd5b6001805490508110610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90611703565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610a929392919061144e565b6020604051808303816000875af1158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad591906114b1565b506000600180549050905060005b81811015610ba35760018181548110610aff57610afe6111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930866040518363ffffffff1660e01b8152600401610b649291906114de565b600060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050508080600101915050610ae3565b5060018281548110610bb857610bb76111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610c1d9291906114de565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906114b1565b50813373ffffffffffffffffffffffffffffffffffffffff167ff41b7910e085d0992d604fd470931728fd77cc8eb504d99e50e51a0a30fcfd1a85604051610ca891906110c4565b60405180910390a3505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018181548110610ceb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600260009054906101000a900460ff1681565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610d7281610d5f565b82525050565b6000610d848383610d69565b60208301905092915050565b6000602082019050919050565b6000610da882610d33565b610db28185610d3e565b9350610dbd83610d4f565b8060005b83811015610dee578151610dd58882610d78565b9750610de083610d90565b925050600181019050610dc1565b5085935050505092915050565b60006020820190508181036000830152610e158184610d9d565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e62610e5d610e5884610e1d565b610e3d565b610e1d565b9050919050565b6000610e7482610e47565b9050919050565b6000610e8682610e69565b9050919050565b610e9681610e7b565b82525050565b6000602082019050610eb16000830184610e8d565b92915050565b60008115159050919050565b610ecc81610eb7565b82525050565b6000602082019050610ee76000830184610ec3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f27578082015181840152602081019050610f0c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f4f82610eed565b610f598185610ef8565b9350610f69818560208601610f09565b610f7281610f33565b840191505092915050565b60006020820190508181036000830152610f978184610f44565b905092915050565b600080fd5b610fad81610d5f565b8114610fb857600080fd5b50565b600081359050610fca81610fa4565b92915050565b600060208284031215610fe657610fe5610f9f565b5b6000610ff484828501610fbb565b91505092915050565b6000806040838503121561101457611013610f9f565b5b600061102285828601610fbb565b925050602061103385828601610fbb565b9150509250929050565b600061104882610e1d565b9050919050565b6110588161103d565b82525050565b6000602082019050611073600083018461104f565b92915050565b600061108482610e69565b9050919050565b61109481611079565b82525050565b60006020820190506110af600083018461108b565b92915050565b6110be81610d5f565b82525050565b60006020820190506110d960008301846110b5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061111f5761111e6110df565b5b50565b60008190506111308261110e565b919050565b600061114082611122565b9050919050565b61115081611135565b82525050565b600060208201905061116b6000830184611147565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506111de81610fa4565b92915050565b6000602082840312156111fa576111f9610f9f565b5b6000611208848285016111cf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124b82610d5f565b915061125683610d5f565b925082820190508082111561126e5761126d611211565b5b92915050565b600061127f82610d5f565b915061128a83610d5f565b925082820261129881610d5f565b915082820484148315176112af576112ae611211565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112f082610d5f565b91506112fb83610d5f565b92508261130b5761130a6112b6565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061135d57607f821691505b6020821081036113705761136f611316565b5b50919050565b7f4d61726b6574206e6f74207265736f6c76656400000000000000000000000000600082015250565b60006113ac601383610ef8565b91506113b782611376565b602082019050919050565b600060208201905081810360008301526113db8161139f565b9050919050565b7f4e6f2077696e6e696e677320746f20636c61696d000000000000000000000000600082015250565b6000611418601483610ef8565b9150611423826113e2565b602082019050919050565b600060208201905081810360008301526114478161140b565b9050919050565b6000606082019050611463600083018661104f565b611470602083018561104f565b61147d60408301846110b5565b949350505050565b61148e81610eb7565b811461149957600080fd5b50565b6000815190506114ab81611485565b92915050565b6000602082840312156114c7576114c6610f9f565b5b60006114d58482850161149c565b91505092915050565b60006040820190506114f3600083018561104f565b61150060208301846110b5565b9392505050565b7f4f6e6c79206f7261636c652063616e207265736f6c7665000000000000000000600082015250565b600061153d601783610ef8565b915061154882611507565b602082019050919050565b6000602082019050818103600083015261156c81611530565b9050919050565b7f4d61726b657420616c7265616479207265736f6c766564000000000000000000600082015250565b60006115a9601783610ef8565b91506115b482611573565b602082019050919050565b600060208201905081810360008301526115d88161159c565b9050919050565b7f496e76616c6964206f7574636f6d650000000000000000000000000000000000600082015250565b6000611615600f83610ef8565b9150611620826115df565b602082019050919050565b6000602082019050818103600083015261164481611608565b9050919050565b7f4d61726b6574206973207265736f6c7665640000000000000000000000000000600082015250565b6000611681601283610ef8565b915061168c8261164b565b602082019050919050565b600060208201905081810360008301526116b081611674565b9050919050565b7f496e76616c6964206f7574636f6d6520696e6465780000000000000000000000600082015250565b60006116ed601583610ef8565b91506116f8826116b7565b602082019050919050565b6000602082019050818103600083015261171c816116e0565b905091905056fea2646970667358221220160230162871b0341b6bddfbadca65fd9da98be726c38bcea6eb39b29992572d64736f6c6343000818003360806040523480156200001157600080fd5b506040516200190c3803806200190c833981810160405281019062000037919062000348565b33828281600390816200004b919062000618565b5080600490816200005d919062000618565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000cc919062000744565b60405180910390fd5b620000e681620000ef60201b60201c565b50505062000761565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200021e82620001d3565b810181811067ffffffffffffffff8211171562000240576200023f620001e4565b5b80604052505050565b600062000255620001b5565b905062000263828262000213565b919050565b600067ffffffffffffffff821115620002865762000285620001e4565b5b6200029182620001d3565b9050602081019050919050565b60005b83811015620002be578082015181840152602081019050620002a1565b60008484015250505050565b6000620002e1620002db8462000268565b62000249565b9050828152602081018484840111156200030057620002ff620001ce565b5b6200030d8482856200029e565b509392505050565b600082601f8301126200032d576200032c620001c9565b5b81516200033f848260208601620002ca565b91505092915050565b60008060408385031215620003625762000361620001bf565b5b600083015167ffffffffffffffff811115620003835762000382620001c4565b5b620003918582860162000315565b925050602083015167ffffffffffffffff811115620003b557620003b4620001c4565b5b620003c38582860162000315565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200042057607f821691505b602082108103620004365762000435620003d8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000461565b620004ac868362000461565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004f9620004f3620004ed84620004c4565b620004ce565b620004c4565b9050919050565b6000819050919050565b6200051583620004d8565b6200052d620005248262000500565b8484546200046e565b825550505050565b600090565b6200054462000535565b620005518184846200050a565b505050565b5b8181101562000579576200056d6000826200053a565b60018101905062000557565b5050565b601f821115620005c85762000592816200043c565b6200059d8462000451565b81016020851015620005ad578190505b620005c5620005bc8562000451565b83018262000556565b50505b505050565b600082821c905092915050565b6000620005ed60001984600802620005cd565b1980831691505092915050565b6000620006088383620005da565b9150826002028217905092915050565b6200062382620003cd565b67ffffffffffffffff8111156200063f576200063e620001e4565b5b6200064b825462000407565b620006588282856200057d565b600060209050601f8311600181146200069057600084156200067b578287015190505b620006878582620005fa565b865550620006f7565b601f198416620006a0866200043c565b60005b82811015620006ca57848901518255600182019150602085019450602081019050620006a3565b86831015620006ea5784890151620006e6601f891682620005da565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200072c82620006ff565b9050919050565b6200073e816200071f565b82525050565b60006020820190506200075b600083018462000733565b92915050565b61119b80620007716000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b4114610202578063a9059cbb14610220578063dd62ed3e14610250578063f2fde38b14610280576100cf565b806370a08231146101aa578063715018a6146101da5780638da5cb5b146101e4576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc61029c565b6040516100e99190610def565b60405180910390f35b61010c60048036038101906101079190610eaa565b61032e565b6040516101199190610f05565b60405180910390f35b61012a610351565b6040516101379190610f2f565b60405180910390f35b61015a60048036038101906101559190610f4a565b61035b565b6040516101679190610f05565b60405180910390f35b61017861038a565b6040516101859190610fb9565b60405180910390f35b6101a860048036038101906101a39190610eaa565b610393565b005b6101c460048036038101906101bf9190610fd4565b6103a9565b6040516101d19190610f2f565b60405180910390f35b6101e26103f1565b005b6101ec610405565b6040516101f99190611010565b60405180910390f35b61020a61042f565b6040516102179190610def565b60405180910390f35b61023a60048036038101906102359190610eaa565b6104c1565b6040516102479190610f05565b60405180910390f35b61026a6004803603810190610265919061102b565b6104e4565b6040516102779190610f2f565b60405180910390f35b61029a60048036038101906102959190610fd4565b61056b565b005b6060600380546102ab9061109a565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061109a565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b5050505050905090565b6000806103396105f1565b90506103468185856105f9565b600191505092915050565b6000600254905090565b6000806103666105f1565b905061037385828561060b565b61037e8585856106a0565b60019150509392505050565b60006006905090565b61039b610794565b6103a5828261081b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103f9610794565b610403600061089d565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461043e9061109a565b80601f016020809104026020016040519081016040528092919081815260200182805461046a9061109a565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b6000806104cc6105f1565b90506104d98185856106a0565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610573610794565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105e55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016105dc9190611010565b60405180910390fd5b6105ee8161089d565b50565b600033905090565b6106068383836001610963565b505050565b600061061784846104e4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561069a578181101561068a578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610681939291906110cb565b60405180910390fd5b61069984848484036000610963565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107125760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016107099190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107845760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161077b9190611010565b60405180910390fd5b61078f838383610b3a565b505050565b61079c6105f1565b73ffffffffffffffffffffffffffffffffffffffff166107ba610405565b73ffffffffffffffffffffffffffffffffffffffff1614610819576107dd6105f1565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108109190611010565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361088d5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108849190611010565b60405180910390fd5b61089960008383610b3a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109d55760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016109cc9190611010565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a3e9190611010565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610b34578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b2b9190610f2f565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b8c578060026000828254610b809190611131565b92505081905550610c5f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c18578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c0f939291906110cb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca85780600260008282540392505081905550610cf5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d529190610f2f565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d99578082015181840152602081019050610d7e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dc182610d5f565b610dcb8185610d6a565b9350610ddb818560208601610d7b565b610de481610da5565b840191505092915050565b60006020820190508181036000830152610e098184610db6565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4182610e16565b9050919050565b610e5181610e36565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b6000819050919050565b610e8781610e74565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b60008060408385031215610ec157610ec0610e11565b5b6000610ecf85828601610e5f565b9250506020610ee085828601610e95565b9150509250929050565b60008115159050919050565b610eff81610eea565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b610f2981610e74565b82525050565b6000602082019050610f446000830184610f20565b92915050565b600080600060608486031215610f6357610f62610e11565b5b6000610f7186828701610e5f565b9350506020610f8286828701610e5f565b9250506040610f9386828701610e95565b9150509250925092565b600060ff82169050919050565b610fb381610f9d565b82525050565b6000602082019050610fce6000830184610faa565b92915050565b600060208284031215610fea57610fe9610e11565b5b6000610ff884828501610e5f565b91505092915050565b61100a81610e36565b82525050565b60006020820190506110256000830184611001565b92915050565b6000806040838503121561104257611041610e11565b5b600061105085828601610e5f565b925050602061106185828601610e5f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110b257607f821691505b6020821081036110c5576110c461106b565b5b50919050565b60006060820190506110e06000830186611001565b6110ed6020830185610f20565b6110fa6040830184610f20565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113c82610e74565b915061114783610e74565b925082820190508082111561115f5761115e611102565b5b9291505056fea264697066735822122052bd3f11231c4bd8265abe87132c6672d718934d60e78f5281093ac60ef1023264736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80634f896d4f116100715780634f896d4f146101305780636ffcc7191461014c5780637dc0d1d0146101685780638abe59ea146101865780639b34ae03146101b6578063ef430aa6146101d4576100a9565b8063062f7b8c146100ae57806311eac855146100cc5780633f6fa655146100ea5780633fad9ae0146101085780634e71d92d14610126575b600080fd5b6100b66101f2565b6040516100c39190610dfb565b60405180910390f35b6100d4610455565b6040516100e19190610e9c565b60405180910390f35b6100f2610479565b6040516100ff9190610ed2565b60405180910390f35b61011061048c565b60405161011d9190610f7d565b60405180910390f35b61012e61051a565b005b61014a60048036038101906101459190610fd0565b61081b565b005b61016660048036038101906101619190610ffd565b61099e565b005b610170610cb5565b60405161017d919061105e565b60405180910390f35b6101a0600480360381019061019b9190610fd0565b610cdb565b6040516101ad919061109a565b60405180910390f35b6101be610d1a565b6040516101cb91906110c4565b60405180910390f35b6101dc610d20565b6040516101e99190611156565b60405180910390f35b60606000600180549050905060008167ffffffffffffffff81111561021a57610219611171565b5b6040519080825280602002602001820160405280156102485781602001602082028036833780820191505090505b5090506000805b83811015610329576001818154811061026b5761026a6111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102ce919061105e565b602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906111e4565b8261031a9190611240565b9150808060010191505061024f565b506000810361033d57819350505050610452565b60005b8381101561044a5781670de0b6b3a764000060018381548110610366576103656111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103c9919061105e565b602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a91906111e4565b6104149190611274565b61041e91906112e5565b838281518110610431576104306111a0565b5b6020026020010181815250508080600101915050610340565b508193505050505b90565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1681565b6003805461049990611345565b80601f01602080910402602001604051908101604052809291908181526020018280546104c590611345565b80156105125780601f106104e757610100808354040283529160200191610512565b820191906000526020600020905b8154815290600101906020018083116104f557829003601f168201915b505050505081565b600460149054906101000a900460ff16610569576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610560906113c2565b60405180910390fd5b6000600160055481548110610581576105806111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105e4919061105e565b602060405180830381865afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062591906111e4565b90506000811161066a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106619061142e565b60405180910390fd5b6001600554815481106106805761067f6111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106e79392919061144e565b6020604051808303816000875af1158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a91906114b1565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107869291906114de565b6020604051808303816000875af11580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c991906114b1565b503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161081091906110c4565b60405180910390a250565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290611553565b60405180910390fd5b600460149054906101000a900460ff16156108fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f2906115bf565b60405180910390fd5b6001805490508110610942576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109399061162b565b60405180910390fd5b6001600460146101000a81548160ff021916908315150217905550806005819055507f148a25ee2a7671350ab878ff183447de8ae5afa2ee0ae7d5ee1ad6b25c4868c28160405161099391906110c4565b60405180910390a150565b600460149054906101000a900460ff16156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e590611697565b60405180910390fd5b6001805490508110610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90611703565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610a929392919061144e565b6020604051808303816000875af1158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad591906114b1565b506000600180549050905060005b81811015610ba35760018181548110610aff57610afe6111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930866040518363ffffffff1660e01b8152600401610b649291906114de565b600060405180830381600087803b158015610b7e57600080fd5b505af1158015610b92573d6000803e3d6000fd5b505050508080600101915050610ae3565b5060018281548110610bb857610bb76111a0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610c1d9291906114de565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906114b1565b50813373ffffffffffffffffffffffffffffffffffffffff167ff41b7910e085d0992d604fd470931728fd77cc8eb504d99e50e51a0a30fcfd1a85604051610ca891906110c4565b60405180910390a3505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018181548110610ceb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600260009054906101000a900460ff1681565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610d7281610d5f565b82525050565b6000610d848383610d69565b60208301905092915050565b6000602082019050919050565b6000610da882610d33565b610db28185610d3e565b9350610dbd83610d4f565b8060005b83811015610dee578151610dd58882610d78565b9750610de083610d90565b925050600181019050610dc1565b5085935050505092915050565b60006020820190508181036000830152610e158184610d9d565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e62610e5d610e5884610e1d565b610e3d565b610e1d565b9050919050565b6000610e7482610e47565b9050919050565b6000610e8682610e69565b9050919050565b610e9681610e7b565b82525050565b6000602082019050610eb16000830184610e8d565b92915050565b60008115159050919050565b610ecc81610eb7565b82525050565b6000602082019050610ee76000830184610ec3565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f27578082015181840152602081019050610f0c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f4f82610eed565b610f598185610ef8565b9350610f69818560208601610f09565b610f7281610f33565b840191505092915050565b60006020820190508181036000830152610f978184610f44565b905092915050565b600080fd5b610fad81610d5f565b8114610fb857600080fd5b50565b600081359050610fca81610fa4565b92915050565b600060208284031215610fe657610fe5610f9f565b5b6000610ff484828501610fbb565b91505092915050565b6000806040838503121561101457611013610f9f565b5b600061102285828601610fbb565b925050602061103385828601610fbb565b9150509250929050565b600061104882610e1d565b9050919050565b6110588161103d565b82525050565b6000602082019050611073600083018461104f565b92915050565b600061108482610e69565b9050919050565b61109481611079565b82525050565b60006020820190506110af600083018461108b565b92915050565b6110be81610d5f565b82525050565b60006020820190506110d960008301846110b5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061111f5761111e6110df565b5b50565b60008190506111308261110e565b919050565b600061114082611122565b9050919050565b61115081611135565b82525050565b600060208201905061116b6000830184611147565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506111de81610fa4565b92915050565b6000602082840312156111fa576111f9610f9f565b5b6000611208848285016111cf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124b82610d5f565b915061125683610d5f565b925082820190508082111561126e5761126d611211565b5b92915050565b600061127f82610d5f565b915061128a83610d5f565b925082820261129881610d5f565b915082820484148315176112af576112ae611211565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112f082610d5f565b91506112fb83610d5f565b92508261130b5761130a6112b6565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061135d57607f821691505b6020821081036113705761136f611316565b5b50919050565b7f4d61726b6574206e6f74207265736f6c76656400000000000000000000000000600082015250565b60006113ac601383610ef8565b91506113b782611376565b602082019050919050565b600060208201905081810360008301526113db8161139f565b9050919050565b7f4e6f2077696e6e696e677320746f20636c61696d000000000000000000000000600082015250565b6000611418601483610ef8565b9150611423826113e2565b602082019050919050565b600060208201905081810360008301526114478161140b565b9050919050565b6000606082019050611463600083018661104f565b611470602083018561104f565b61147d60408301846110b5565b949350505050565b61148e81610eb7565b811461149957600080fd5b50565b6000815190506114ab81611485565b92915050565b6000602082840312156114c7576114c6610f9f565b5b60006114d58482850161149c565b91505092915050565b60006040820190506114f3600083018561104f565b61150060208301846110b5565b9392505050565b7f4f6e6c79206f7261636c652063616e207265736f6c7665000000000000000000600082015250565b600061153d601783610ef8565b915061154882611507565b602082019050919050565b6000602082019050818103600083015261156c81611530565b9050919050565b7f4d61726b657420616c7265616479207265736f6c766564000000000000000000600082015250565b60006115a9601783610ef8565b91506115b482611573565b602082019050919050565b600060208201905081810360008301526115d88161159c565b9050919050565b7f496e76616c6964206f7574636f6d650000000000000000000000000000000000600082015250565b6000611615600f83610ef8565b9150611620826115df565b602082019050919050565b6000602082019050818103600083015261164481611608565b9050919050565b7f4d61726b6574206973207265736f6c7665640000000000000000000000000000600082015250565b6000611681601283610ef8565b915061168c8261164b565b602082019050919050565b600060208201905081810360008301526116b081611674565b9050919050565b7f496e76616c6964206f7574636f6d6520696e6465780000000000000000000000600082015250565b60006116ed601583610ef8565b91506116f8826116b7565b602082019050919050565b6000602082019050818103600083015261171c816116e0565b905091905056fea2646970667358221220160230162871b0341b6bddfbadca65fd9da98be726c38bcea6eb39b29992572d64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2339,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "usdcToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)799"
      },
      {
        "astId": 2343,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "outcomeTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(MintableERC20)982)dyn_storage"
      },
      {
        "astId": 2346,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "category",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(Category)2336"
      },
      {
        "astId": 2348,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "question",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2350,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "oracle",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2352,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "resolved",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 2354,
        "contract": "contracts/PredictionMarketNWay.sol:PredictionMarketNWay",
        "label": "winningOutcome",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(MintableERC20)982)dyn_storage": {
        "base": "t_contract(MintableERC20)982",
        "encoding": "dynamic_array",
        "label": "contract MintableERC20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)799": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(MintableERC20)982": {
        "encoding": "inplace",
        "label": "contract MintableERC20",
        "numberOfBytes": "20"
      },
      "t_enum(Category)2336": {
        "encoding": "inplace",
        "label": "enum PredictionMarketNWay.Category",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}